
huisludbld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00001950  000019e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000061  0080200e  0080200e  000019f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  00001a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007e4f  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001136  00000000  00000000  00009b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004a65  00000000  00000000  0000ac65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000984  00000000  00000000  0000f6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000291f6  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002449  00000000  00000000  00039246  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0003b68f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a6de  00000000  00000000  0003b8c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
       6:	00 00       	nop
       8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
       a:	00 00       	nop
       c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
       e:	00 00       	nop
      10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
      12:	00 00       	nop
      14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
      16:	00 00       	nop
      18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_9>
      28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7e c2       	rjmp	.+1276   	; 0x52e <__vector_12>
      32:	00 00       	nop
      34:	a5 c2       	rjmp	.+1354   	; 0x580 <__vector_13>
      36:	00 00       	nop
      38:	cc c2       	rjmp	.+1432   	; 0x5d2 <__vector_14>
      3a:	00 00       	nop
      3c:	f3 c2       	rjmp	.+1510   	; 0x624 <__vector_15>
      3e:	00 00       	nop
      40:	1a c3       	rjmp	.+1588   	; 0x676 <__vector_16>
      42:	00 00       	nop
      44:	41 c3       	rjmp	.+1666   	; 0x6c8 <__vector_17>
      46:	00 00       	nop
      48:	68 c3       	rjmp	.+1744   	; 0x71a <__vector_18>
      4a:	00 00       	nop
      4c:	8f c3       	rjmp	.+1822   	; 0x76c <__vector_19>
      4e:	00 00       	nop
      50:	b6 c3       	rjmp	.+1900   	; 0x7be <__vector_20>
      52:	00 00       	nop
      54:	dd c3       	rjmp	.+1978   	; 0x810 <__vector_21>
      56:	00 00       	nop
      58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_30>
      7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
      82:	00 00       	nop
      84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
      86:	00 00       	nop
      88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2c c0       	rjmp	.+88     	; 0xe6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c3       	rjmp	.+2000   	; 0x862 <__vector_36>
      92:	00 00       	nop
      94:	0f c4       	rjmp	.+2078   	; 0x8b4 <__vector_37>
      96:	00 00       	nop
      98:	36 c4       	rjmp	.+2156   	; 0x906 <__vector_38>
      9a:	00 00       	nop
      9c:	5d c4       	rjmp	.+2234   	; 0x958 <__vector_39>
      9e:	00 00       	nop
      a0:	22 c0       	rjmp	.+68     	; 0xe6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	20 c0       	rjmp	.+64     	; 0xe6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1e c0       	rjmp	.+60     	; 0xe6 <__bad_interrupt>
	...

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e0 e5       	ldi	r30, 0x50	; 80
      c0:	f9 e1       	ldi	r31, 0x19	; 25
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 30       	cpi	r26, 0x0E	; 14
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	ae e0       	ldi	r26, 0x0E	; 14
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	af 36       	cpi	r26, 0x6F	; 111
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 0d 0c 	call	0x181a	; 0x181a <main>
      e2:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <_exit>

000000e6 <__bad_interrupt>:
      e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
      e8:	fc 01       	movw	r30, r24
      ea:	81 81       	ldd	r24, Z+1	; 0x01
      ec:	85 ff       	sbrs	r24, 5
      ee:	fd cf       	rjmp	.-6      	; 0xea <usart_putchar+0x2>
      f0:	60 83       	st	Z, r22
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	08 95       	ret

000000f8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
      f8:	4f 92       	push	r4
      fa:	5f 92       	push	r5
      fc:	6f 92       	push	r6
      fe:	7f 92       	push	r7
     100:	8f 92       	push	r8
     102:	9f 92       	push	r9
     104:	af 92       	push	r10
     106:	bf 92       	push	r11
     108:	cf 92       	push	r12
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24
     11a:	4a 01       	movw	r8, r20
     11c:	5b 01       	movw	r10, r22
     11e:	28 01       	movw	r4, r16
     120:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     122:	d9 01       	movw	r26, r18
     124:	c8 01       	movw	r24, r16
     126:	68 94       	set
     128:	12 f8       	bld	r1, 2
     12a:	b6 95       	lsr	r27
     12c:	a7 95       	ror	r26
     12e:	97 95       	ror	r25
     130:	87 95       	ror	r24
     132:	16 94       	lsr	r1
     134:	d1 f7       	brne	.-12     	; 0x12a <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     136:	b9 01       	movw	r22, r18
     138:	a8 01       	movw	r20, r16
     13a:	03 2e       	mov	r0, r19
     13c:	36 e1       	ldi	r19, 0x16	; 22
     13e:	76 95       	lsr	r23
     140:	67 95       	ror	r22
     142:	57 95       	ror	r21
     144:	47 95       	ror	r20
     146:	3a 95       	dec	r19
     148:	d1 f7       	brne	.-12     	; 0x13e <usart_set_baudrate+0x46>
     14a:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     14c:	2b 81       	ldd	r18, Y+3	; 0x03
     14e:	22 fd       	sbrc	r18, 2
     150:	08 c0       	rjmp	.+16     	; 0x162 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     152:	b6 95       	lsr	r27
     154:	a7 95       	ror	r26
     156:	97 95       	ror	r25
     158:	87 95       	ror	r24
		min_rate /= 2;
     15a:	76 95       	lsr	r23
     15c:	67 95       	ror	r22
     15e:	57 95       	ror	r21
     160:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     162:	88 15       	cp	r24, r8
     164:	99 05       	cpc	r25, r9
     166:	aa 05       	cpc	r26, r10
     168:	bb 05       	cpc	r27, r11
     16a:	08 f4       	brcc	.+2      	; 0x16e <usart_set_baudrate+0x76>
     16c:	a6 c0       	rjmp	.+332    	; 0x2ba <usart_set_baudrate+0x1c2>
     16e:	84 16       	cp	r8, r20
     170:	95 06       	cpc	r9, r21
     172:	a6 06       	cpc	r10, r22
     174:	b7 06       	cpc	r11, r23
     176:	08 f4       	brcc	.+2      	; 0x17a <usart_set_baudrate+0x82>
     178:	a2 c0       	rjmp	.+324    	; 0x2be <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	82 fd       	sbrc	r24, 2
     17e:	04 c0       	rjmp	.+8      	; 0x188 <usart_set_baudrate+0x90>
		baud *= 2;
     180:	88 0c       	add	r8, r8
     182:	99 1c       	adc	r9, r9
     184:	aa 1c       	adc	r10, r10
     186:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     188:	c3 01       	movw	r24, r6
     18a:	b2 01       	movw	r22, r4
     18c:	a5 01       	movw	r20, r10
     18e:	94 01       	movw	r18, r8
     190:	0e 94 84 0c 	call	0x1908	; 0x1908 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     194:	2f 3f       	cpi	r18, 0xFF	; 255
     196:	31 05       	cpc	r19, r1
     198:	41 05       	cpc	r20, r1
     19a:	51 05       	cpc	r21, r1
     19c:	08 f4       	brcc	.+2      	; 0x1a0 <usart_set_baudrate+0xa8>
     19e:	91 c0       	rjmp	.+290    	; 0x2c2 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     1a0:	c1 2c       	mov	r12, r1
     1a2:	d1 2c       	mov	r13, r1
     1a4:	76 01       	movw	r14, r12
     1a6:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     1a8:	19 ef       	ldi	r17, 0xF9	; 249
     1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
     1ac:	2c 15       	cp	r18, r12
     1ae:	3d 05       	cpc	r19, r13
     1b0:	4e 05       	cpc	r20, r14
     1b2:	5f 05       	cpc	r21, r15
     1b4:	68 f0       	brcs	.+26     	; 0x1d0 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
     1b6:	cc 0c       	add	r12, r12
     1b8:	dd 1c       	adc	r13, r13
     1ba:	ee 1c       	adc	r14, r14
     1bc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     1be:	1d 3f       	cpi	r17, 0xFD	; 253
     1c0:	14 f4       	brge	.+4      	; 0x1c6 <usart_set_baudrate+0xce>
			limit |= 1;
     1c2:	68 94       	set
     1c4:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     1c6:	1f 5f       	subi	r17, 0xFF	; 255
     1c8:	17 30       	cpi	r17, 0x07	; 7
     1ca:	81 f7       	brne	.-32     	; 0x1ac <usart_set_baudrate+0xb4>
     1cc:	21 2f       	mov	r18, r17
     1ce:	50 c0       	rjmp	.+160    	; 0x270 <usart_set_baudrate+0x178>
     1d0:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     1d2:	11 23       	and	r17, r17
     1d4:	0c f0       	brlt	.+2      	; 0x1d8 <usart_set_baudrate+0xe0>
     1d6:	4c c0       	rjmp	.+152    	; 0x270 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     1d8:	d5 01       	movw	r26, r10
     1da:	c4 01       	movw	r24, r8
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	aa 1f       	adc	r26, r26
     1e2:	bb 1f       	adc	r27, r27
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	aa 1f       	adc	r26, r26
     1ea:	bb 1f       	adc	r27, r27
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	aa 1f       	adc	r26, r26
     1f2:	bb 1f       	adc	r27, r27
     1f4:	48 1a       	sub	r4, r24
     1f6:	59 0a       	sbc	r5, r25
     1f8:	6a 0a       	sbc	r6, r26
     1fa:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     1fc:	1e 3f       	cpi	r17, 0xFE	; 254
     1fe:	f4 f4       	brge	.+60     	; 0x23c <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     200:	6d ef       	ldi	r22, 0xFD	; 253
     202:	7f ef       	ldi	r23, 0xFF	; 255
     204:	61 1b       	sub	r22, r17
     206:	71 09       	sbc	r23, r1
     208:	17 fd       	sbrc	r17, 7
     20a:	73 95       	inc	r23
     20c:	04 c0       	rjmp	.+8      	; 0x216 <usart_set_baudrate+0x11e>
     20e:	44 0c       	add	r4, r4
     210:	55 1c       	adc	r5, r5
     212:	66 1c       	adc	r6, r6
     214:	77 1c       	adc	r7, r7
     216:	6a 95       	dec	r22
     218:	d2 f7       	brpl	.-12     	; 0x20e <usart_set_baudrate+0x116>
     21a:	d5 01       	movw	r26, r10
     21c:	c4 01       	movw	r24, r8
     21e:	b6 95       	lsr	r27
     220:	a7 95       	ror	r26
     222:	97 95       	ror	r25
     224:	87 95       	ror	r24
     226:	bc 01       	movw	r22, r24
     228:	cd 01       	movw	r24, r26
     22a:	64 0d       	add	r22, r4
     22c:	75 1d       	adc	r23, r5
     22e:	86 1d       	adc	r24, r6
     230:	97 1d       	adc	r25, r7
     232:	a5 01       	movw	r20, r10
     234:	94 01       	movw	r18, r8
     236:	0e 94 84 0c 	call	0x1908	; 0x1908 <__udivmodsi4>
     23a:	36 c0       	rjmp	.+108    	; 0x2a8 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
     23c:	23 e0       	ldi	r18, 0x03	; 3
     23e:	21 0f       	add	r18, r17
     240:	d5 01       	movw	r26, r10
     242:	c4 01       	movw	r24, r8
     244:	04 c0       	rjmp	.+8      	; 0x24e <usart_set_baudrate+0x156>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	aa 1f       	adc	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	2a 95       	dec	r18
     250:	d2 f7       	brpl	.-12     	; 0x246 <usart_set_baudrate+0x14e>
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     256:	b6 95       	lsr	r27
     258:	a7 95       	ror	r26
     25a:	97 95       	ror	r25
     25c:	87 95       	ror	r24
     25e:	bc 01       	movw	r22, r24
     260:	cd 01       	movw	r24, r26
     262:	64 0d       	add	r22, r4
     264:	75 1d       	adc	r23, r5
     266:	86 1d       	adc	r24, r6
     268:	97 1d       	adc	r25, r7
     26a:	0e 94 84 0c 	call	0x1908	; 0x1908 <__udivmodsi4>
     26e:	1c c0       	rjmp	.+56     	; 0x2a8 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     270:	2d 5f       	subi	r18, 0xFD	; 253
     272:	d5 01       	movw	r26, r10
     274:	c4 01       	movw	r24, r8
     276:	04 c0       	rjmp	.+8      	; 0x280 <usart_set_baudrate+0x188>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	aa 1f       	adc	r26, r26
     27e:	bb 1f       	adc	r27, r27
     280:	2a 95       	dec	r18
     282:	d2 f7       	brpl	.-12     	; 0x278 <usart_set_baudrate+0x180>
     284:	9c 01       	movw	r18, r24
     286:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     288:	b6 95       	lsr	r27
     28a:	a7 95       	ror	r26
     28c:	97 95       	ror	r25
     28e:	87 95       	ror	r24
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	64 0d       	add	r22, r4
     296:	75 1d       	adc	r23, r5
     298:	86 1d       	adc	r24, r6
     29a:	97 1d       	adc	r25, r7
     29c:	0e 94 84 0c 	call	0x1908	; 0x1908 <__udivmodsi4>
     2a0:	21 50       	subi	r18, 0x01	; 1
     2a2:	31 09       	sbc	r19, r1
     2a4:	41 09       	sbc	r20, r1
     2a6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     2a8:	83 2f       	mov	r24, r19
     2aa:	8f 70       	andi	r24, 0x0F	; 15
     2ac:	12 95       	swap	r17
     2ae:	10 7f       	andi	r17, 0xF0	; 240
     2b0:	18 2b       	or	r17, r24
     2b2:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     2b4:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	18 c0       	rjmp	.+48     	; 0x2ea <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	16 c0       	rjmp	.+44     	; 0x2ea <usart_set_baudrate+0x1f2>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	14 c0       	rjmp	.+40     	; 0x2ea <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     2c2:	d5 01       	movw	r26, r10
     2c4:	c4 01       	movw	r24, r8
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	aa 1f       	adc	r26, r26
     2cc:	bb 1f       	adc	r27, r27
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	aa 1f       	adc	r26, r26
     2d4:	bb 1f       	adc	r27, r27
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	aa 1f       	adc	r26, r26
     2dc:	bb 1f       	adc	r27, r27
     2de:	48 1a       	sub	r4, r24
     2e0:	59 0a       	sbc	r5, r25
     2e2:	6a 0a       	sbc	r6, r26
     2e4:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     2e6:	19 ef       	ldi	r17, 0xF9	; 249
     2e8:	8b cf       	rjmp	.-234    	; 0x200 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	08 95       	ret

0000030c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
     316:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     318:	00 97       	sbiw	r24, 0x00	; 0
     31a:	09 f4       	brne	.+2      	; 0x31e <usart_init_rs232+0x12>
     31c:	77 c0       	rjmp	.+238    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     31e:	c1 15       	cp	r28, r1
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	d8 07       	cpc	r29, r24
     324:	21 f4       	brne	.+8      	; 0x32e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     326:	64 e0       	ldi	r22, 0x04	; 4
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	f5 d0       	rcall	.+490    	; 0x516 <sysclk_enable_module>
     32c:	6f c0       	rjmp	.+222    	; 0x40c <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     32e:	c0 38       	cpi	r28, 0x80	; 128
     330:	e1 e0       	ldi	r30, 0x01	; 1
     332:	de 07       	cpc	r29, r30
     334:	21 f4       	brne	.+8      	; 0x33e <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     336:	62 e0       	ldi	r22, 0x02	; 2
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	ed d0       	rcall	.+474    	; 0x516 <sysclk_enable_module>
     33c:	67 c0       	rjmp	.+206    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
     33e:	c1 15       	cp	r28, r1
     340:	f1 e0       	ldi	r31, 0x01	; 1
     342:	df 07       	cpc	r29, r31
     344:	21 f4       	brne	.+8      	; 0x34e <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	e5 d0       	rcall	.+458    	; 0x516 <sysclk_enable_module>
     34c:	5f c0       	rjmp	.+190    	; 0x40c <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     34e:	c0 38       	cpi	r28, 0x80	; 128
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	d8 07       	cpc	r29, r24
     354:	21 f4       	brne	.+8      	; 0x35e <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	dd d0       	rcall	.+442    	; 0x516 <sysclk_enable_module>
     35c:	57 c0       	rjmp	.+174    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     35e:	c1 15       	cp	r28, r1
     360:	e2 e0       	ldi	r30, 0x02	; 2
     362:	de 07       	cpc	r29, r30
     364:	21 f4       	brne	.+8      	; 0x36e <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     366:	62 e0       	ldi	r22, 0x02	; 2
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	d5 d0       	rcall	.+426    	; 0x516 <sysclk_enable_module>
     36c:	4f c0       	rjmp	.+158    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     36e:	c1 15       	cp	r28, r1
     370:	f3 e0       	ldi	r31, 0x03	; 3
     372:	df 07       	cpc	r29, r31
     374:	21 f4       	brne	.+8      	; 0x37e <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     376:	64 e0       	ldi	r22, 0x04	; 4
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	cd d0       	rcall	.+410    	; 0x516 <sysclk_enable_module>
     37c:	47 c0       	rjmp	.+142    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
     37e:	c1 15       	cp	r28, r1
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	d8 07       	cpc	r29, r24
     384:	21 f4       	brne	.+8      	; 0x38e <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	c5 d0       	rcall	.+394    	; 0x516 <sysclk_enable_module>
     38c:	3f c0       	rjmp	.+126    	; 0x40c <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
     38e:	c0 34       	cpi	r28, 0x40	; 64
     390:	e8 e0       	ldi	r30, 0x08	; 8
     392:	de 07       	cpc	r29, r30
     394:	21 f4       	brne	.+8      	; 0x39e <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	bd d0       	rcall	.+378    	; 0x516 <sysclk_enable_module>
     39c:	37 c0       	rjmp	.+110    	; 0x40c <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
     39e:	c0 34       	cpi	r28, 0x40	; 64
     3a0:	f9 e0       	ldi	r31, 0x09	; 9
     3a2:	df 07       	cpc	r29, r31
     3a4:	21 f4       	brne	.+8      	; 0x3ae <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	b5 d0       	rcall	.+362    	; 0x516 <sysclk_enable_module>
     3ac:	2f c0       	rjmp	.+94     	; 0x40c <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     3ae:	c0 3b       	cpi	r28, 0xB0	; 176
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	d8 07       	cpc	r29, r24
     3b4:	21 f4       	brne	.+8      	; 0x3be <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     3b6:	64 e0       	ldi	r22, 0x04	; 4
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	ad d0       	rcall	.+346    	; 0x516 <sysclk_enable_module>
     3bc:	27 c0       	rjmp	.+78     	; 0x40c <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     3be:	c0 3e       	cpi	r28, 0xE0	; 224
     3c0:	e8 e0       	ldi	r30, 0x08	; 8
     3c2:	de 07       	cpc	r29, r30
     3c4:	21 f4       	brne	.+8      	; 0x3ce <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     3c6:	68 e0       	ldi	r22, 0x08	; 8
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	a5 d0       	rcall	.+330    	; 0x516 <sysclk_enable_module>
     3cc:	1f c0       	rjmp	.+62     	; 0x40c <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     3ce:	c0 3c       	cpi	r28, 0xC0	; 192
     3d0:	f8 e0       	ldi	r31, 0x08	; 8
     3d2:	df 07       	cpc	r29, r31
     3d4:	21 f4       	brne	.+8      	; 0x3de <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     3d6:	60 e1       	ldi	r22, 0x10	; 16
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	9d d0       	rcall	.+314    	; 0x516 <sysclk_enable_module>
     3dc:	17 c0       	rjmp	.+46     	; 0x40c <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     3de:	c0 3c       	cpi	r28, 0xC0	; 192
     3e0:	89 e0       	ldi	r24, 0x09	; 9
     3e2:	d8 07       	cpc	r29, r24
     3e4:	21 f4       	brne	.+8      	; 0x3ee <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     3e6:	60 e1       	ldi	r22, 0x10	; 16
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	95 d0       	rcall	.+298    	; 0x516 <sysclk_enable_module>
     3ec:	0f c0       	rjmp	.+30     	; 0x40c <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     3ee:	c0 38       	cpi	r28, 0x80	; 128
     3f0:	e4 e0       	ldi	r30, 0x04	; 4
     3f2:	de 07       	cpc	r29, r30
     3f4:	21 f4       	brne	.+8      	; 0x3fe <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     3f6:	60 e4       	ldi	r22, 0x40	; 64
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	8d d0       	rcall	.+282    	; 0x516 <sysclk_enable_module>
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
     3fe:	c0 36       	cpi	r28, 0x60	; 96
     400:	f4 e0       	ldi	r31, 0x04	; 4
     402:	df 07       	cpc	r29, r31
     404:	19 f4       	brne	.+6      	; 0x40c <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
     406:	60 e8       	ldi	r22, 0x80	; 128
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	85 d0       	rcall	.+266    	; 0x516 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     40c:	8c 81       	ldd	r24, Y+4	; 0x04
     40e:	8f 73       	andi	r24, 0x3F	; 63
     410:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     412:	f8 01       	movw	r30, r16
     414:	94 81       	ldd	r25, Z+4	; 0x04
     416:	85 81       	ldd	r24, Z+5	; 0x05
     418:	89 2b       	or	r24, r25
     41a:	96 81       	ldd	r25, Z+6	; 0x06
     41c:	99 23       	and	r25, r25
     41e:	11 f0       	breq	.+4      	; 0x424 <usart_init_rs232+0x118>
     420:	98 e0       	ldi	r25, 0x08	; 8
     422:	01 c0       	rjmp	.+2      	; 0x426 <usart_init_rs232+0x11a>
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	89 2b       	or	r24, r25
     428:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     42a:	f8 01       	movw	r30, r16
     42c:	40 81       	ld	r20, Z
     42e:	51 81       	ldd	r21, Z+1	; 0x01
     430:	62 81       	ldd	r22, Z+2	; 0x02
     432:	73 81       	ldd	r23, Z+3	; 0x03
     434:	00 e8       	ldi	r16, 0x80	; 128
     436:	14 e8       	ldi	r17, 0x84	; 132
     438:	2e e1       	ldi	r18, 0x1E	; 30
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	ce 01       	movw	r24, r28
     43e:	5c de       	rcall	.-840    	; 0xf8 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     440:	9b 81       	ldd	r25, Y+3	; 0x03
     442:	98 60       	ori	r25, 0x08	; 8
     444:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     446:	9b 81       	ldd	r25, Y+3	; 0x03
     448:	90 61       	ori	r25, 0x10	; 16
     44a:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <wdt_set_timeout_period>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
     456:	60 91 80 00 	lds	r22, 0x0080
     45a:	62 70       	andi	r22, 0x02	; 2
     45c:	61 60       	ori	r22, 0x01	; 1
     45e:	24 e0       	ldi	r18, 0x04	; 4
     460:	82 9f       	mul	r24, r18
     462:	c0 01       	movw	r24, r0
     464:	11 24       	eor	r1, r1
     466:	8c 73       	andi	r24, 0x3C	; 60
     468:	68 2b       	or	r22, r24
     46a:	80 e8       	ldi	r24, 0x80	; 128
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	e9 d2       	rcall	.+1490   	; 0xa42 <ccp_write_io>
     470:	e0 e8       	ldi	r30, 0x80	; 128
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	82 81       	ldd	r24, Z+2	; 0x02
     476:	80 fd       	sbrc	r24, 0
     478:	fd cf       	rjmp	.-6      	; 0x474 <wdt_set_timeout_period+0x1e>
     47a:	08 95       	ret

0000047c <wdt_disable>:
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
     47c:	60 91 80 00 	lds	r22, 0x0080
     480:	6c 7f       	andi	r22, 0xFC	; 252
     482:	61 60       	ori	r22, 0x01	; 1
	ccp_write_io((void *)&WDT.CTRL, temp);
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	dc c2       	rjmp	.+1464   	; 0xa42 <ccp_write_io>
     48a:	08 95       	ret

0000048c <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     48c:	60 91 80 00 	lds	r22, 0x0080
     490:	6c 73       	andi	r22, 0x3C	; 60
     492:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	d4 d2       	rcall	.+1448   	; 0xa42 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     49a:	e0 e8       	ldi	r30, 0x80	; 128
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	80 fd       	sbrc	r24, 0
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <wdt_enable+0x12>
	wdt_wait_while_busy();
}
     4a4:	08 95       	ret

000004a6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	fc 01       	movw	r30, r24
     4ac:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     4b2:	c6 2f       	mov	r28, r22
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
     4b6:	de 01       	movw	r26, r28
     4b8:	02 2e       	mov	r0, r18
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <ioport_configure_port_pin+0x1a>
     4bc:	b5 95       	asr	r27
     4be:	a7 95       	ror	r26
     4c0:	0a 94       	dec	r0
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <ioport_configure_port_pin+0x16>
     4c4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4c6:	50 83       	st	Z, r21
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     4ce:	28 30       	cpi	r18, 0x08	; 8
     4d0:	31 05       	cpc	r19, r1
     4d2:	89 f7       	brne	.-30     	; 0x4b6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     4d4:	40 ff       	sbrs	r20, 0
     4d6:	0a c0       	rjmp	.+20     	; 0x4ec <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     4d8:	41 ff       	sbrs	r20, 1
     4da:	03 c0       	rjmp	.+6      	; 0x4e2 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     4dc:	fc 01       	movw	r30, r24
     4de:	65 83       	std	Z+5, r22	; 0x05
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     4e2:	fc 01       	movw	r30, r24
     4e4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     4e6:	fc 01       	movw	r30, r24
     4e8:	61 83       	std	Z+1, r22	; 0x01
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     4ec:	fc 01       	movw	r30, r24
     4ee:	62 83       	std	Z+2, r22	; 0x02
	}
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	80 93 70 00 	sts	0x0070, r24
     4fc:	80 93 71 00 	sts	0x0071, r24
     500:	80 93 72 00 	sts	0x0072, r24
     504:	80 93 73 00 	sts	0x0073, r24
     508:	80 93 74 00 	sts	0x0074, r24
     50c:	80 93 75 00 	sts	0x0075, r24
     510:	80 93 76 00 	sts	0x0076, r24
     514:	08 95       	ret

00000516 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     516:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     518:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     51a:	e8 2f       	mov	r30, r24
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	e0 59       	subi	r30, 0x90	; 144
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	60 95       	com	r22
     524:	80 81       	ld	r24, Z
     526:	68 23       	and	r22, r24
     528:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     52a:	9f bf       	out	0x3f, r25	; 63
     52c:	08 95       	ret

0000052e <__vector_12>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	2f 93       	push	r18
     53a:	3f 93       	push	r19
     53c:	4f 93       	push	r20
     53e:	5f 93       	push	r21
     540:	6f 93       	push	r22
     542:	7f 93       	push	r23
     544:	8f 93       	push	r24
     546:	9f 93       	push	r25
     548:	af 93       	push	r26
     54a:	bf 93       	push	r27
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
     550:	e0 91 28 20 	lds	r30, 0x2028
     554:	f0 91 29 20 	lds	r31, 0x2029
     558:	30 97       	sbiw	r30, 0x00	; 0
     55a:	09 f0       	breq	.+2      	; 0x55e <__vector_12+0x30>
     55c:	09 95       	icall
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <__vector_13>:
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	e0 91 26 20 	lds	r30, 0x2026
     5a6:	f0 91 27 20 	lds	r31, 0x2027
     5aa:	30 97       	sbiw	r30, 0x00	; 0
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__vector_13+0x30>
     5ae:	09 95       	icall
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <__vector_14>:
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	11 24       	eor	r1, r1
     5dc:	2f 93       	push	r18
     5de:	3f 93       	push	r19
     5e0:	4f 93       	push	r20
     5e2:	5f 93       	push	r21
     5e4:	6f 93       	push	r22
     5e6:	7f 93       	push	r23
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	af 93       	push	r26
     5ee:	bf 93       	push	r27
     5f0:	ef 93       	push	r30
     5f2:	ff 93       	push	r31
     5f4:	e0 91 24 20 	lds	r30, 0x2024
     5f8:	f0 91 25 20 	lds	r31, 0x2025
     5fc:	30 97       	sbiw	r30, 0x00	; 0
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_14+0x30>
     600:	09 95       	icall
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <__vector_15>:
     624:	1f 92       	push	r1
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	4f 93       	push	r20
     634:	5f 93       	push	r21
     636:	6f 93       	push	r22
     638:	7f 93       	push	r23
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
     646:	e0 91 22 20 	lds	r30, 0x2022
     64a:	f0 91 23 20 	lds	r31, 0x2023
     64e:	30 97       	sbiw	r30, 0x00	; 0
     650:	09 f0       	breq	.+2      	; 0x654 <__vector_15+0x30>
     652:	09 95       	icall
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_16>:
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31
     698:	e0 91 20 20 	lds	r30, 0x2020
     69c:	f0 91 21 20 	lds	r31, 0x2021
     6a0:	30 97       	sbiw	r30, 0x00	; 0
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__vector_16+0x30>
     6a4:	09 95       	icall
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <__vector_17>:
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	2f 93       	push	r18
     6d4:	3f 93       	push	r19
     6d6:	4f 93       	push	r20
     6d8:	5f 93       	push	r21
     6da:	6f 93       	push	r22
     6dc:	7f 93       	push	r23
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
     6ea:	e0 91 1e 20 	lds	r30, 0x201E
     6ee:	f0 91 1f 20 	lds	r31, 0x201F
     6f2:	30 97       	sbiw	r30, 0x00	; 0
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <__vector_17+0x30>
     6f6:	09 95       	icall
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	bf 91       	pop	r27
     6fe:	af 91       	pop	r26
     700:	9f 91       	pop	r25
     702:	8f 91       	pop	r24
     704:	7f 91       	pop	r23
     706:	6f 91       	pop	r22
     708:	5f 91       	pop	r21
     70a:	4f 91       	pop	r20
     70c:	3f 91       	pop	r19
     70e:	2f 91       	pop	r18
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <__vector_18>:
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
     73c:	e0 91 1c 20 	lds	r30, 0x201C
     740:	f0 91 1d 20 	lds	r31, 0x201D
     744:	30 97       	sbiw	r30, 0x00	; 0
     746:	09 f0       	breq	.+2      	; 0x74a <__vector_18+0x30>
     748:	09 95       	icall
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	bf 91       	pop	r27
     750:	af 91       	pop	r26
     752:	9f 91       	pop	r25
     754:	8f 91       	pop	r24
     756:	7f 91       	pop	r23
     758:	6f 91       	pop	r22
     75a:	5f 91       	pop	r21
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <__vector_19>:
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	2f 93       	push	r18
     778:	3f 93       	push	r19
     77a:	4f 93       	push	r20
     77c:	5f 93       	push	r21
     77e:	6f 93       	push	r22
     780:	7f 93       	push	r23
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
     78e:	e0 91 1a 20 	lds	r30, 0x201A
     792:	f0 91 1b 20 	lds	r31, 0x201B
     796:	30 97       	sbiw	r30, 0x00	; 0
     798:	09 f0       	breq	.+2      	; 0x79c <__vector_19+0x30>
     79a:	09 95       	icall
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_20>:
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	e0 91 18 20 	lds	r30, 0x2018
     7e4:	f0 91 19 20 	lds	r31, 0x2019
     7e8:	30 97       	sbiw	r30, 0x00	; 0
     7ea:	09 f0       	breq	.+2      	; 0x7ee <__vector_20+0x30>
     7ec:	09 95       	icall
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_21>:
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
     832:	e0 91 16 20 	lds	r30, 0x2016
     836:	f0 91 17 20 	lds	r31, 0x2017
     83a:	30 97       	sbiw	r30, 0x00	; 0
     83c:	09 f0       	breq	.+2      	; 0x840 <__vector_21+0x30>
     83e:	09 95       	icall
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_36>:
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
     884:	e0 91 14 20 	lds	r30, 0x2014
     888:	f0 91 15 20 	lds	r31, 0x2015
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_36+0x30>
     890:	09 95       	icall
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <__vector_37>:
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	0f 92       	push	r0
     8bc:	11 24       	eor	r1, r1
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
     8d6:	e0 91 12 20 	lds	r30, 0x2012
     8da:	f0 91 13 20 	lds	r31, 0x2013
     8de:	30 97       	sbiw	r30, 0x00	; 0
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__vector_37+0x30>
     8e2:	09 95       	icall
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_38>:
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	e0 91 10 20 	lds	r30, 0x2010
     92c:	f0 91 11 20 	lds	r31, 0x2011
     930:	30 97       	sbiw	r30, 0x00	; 0
     932:	09 f0       	breq	.+2      	; 0x936 <__vector_38+0x30>
     934:	09 95       	icall
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_39>:
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	e0 91 0e 20 	lds	r30, 0x200E
     97e:	f0 91 0f 20 	lds	r31, 0x200F
     982:	30 97       	sbiw	r30, 0x00	; 0
     984:	09 f0       	breq	.+2      	; 0x988 <__vector_39+0x30>
     986:	09 95       	icall
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <tc45_enable>:
     9aa:	cf 93       	push	r28
     9ac:	cf b7       	in	r28, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	28 2f       	mov	r18, r24
     9b2:	39 2f       	mov	r19, r25
     9b4:	21 15       	cp	r18, r1
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	38 07       	cpc	r19, r24
     9ba:	39 f4       	brne	.+14     	; 0x9ca <tc45_enable+0x20>
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	aa dd       	rcall	.-1196   	; 0x516 <sysclk_enable_module>
     9c2:	64 e0       	ldi	r22, 0x04	; 4
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	a7 dd       	rcall	.-1202   	; 0x516 <sysclk_enable_module>
     9c8:	17 c0       	rjmp	.+46     	; 0x9f8 <tc45_enable+0x4e>
     9ca:	20 34       	cpi	r18, 0x40	; 64
     9cc:	88 e0       	ldi	r24, 0x08	; 8
     9ce:	38 07       	cpc	r19, r24
     9d0:	39 f4       	brne	.+14     	; 0x9e0 <tc45_enable+0x36>
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	9f dd       	rcall	.-1218   	; 0x516 <sysclk_enable_module>
     9d8:	64 e0       	ldi	r22, 0x04	; 4
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	9c dd       	rcall	.-1224   	; 0x516 <sysclk_enable_module>
     9de:	0c c0       	rjmp	.+24     	; 0x9f8 <tc45_enable+0x4e>
     9e0:	20 34       	cpi	r18, 0x40	; 64
     9e2:	39 40       	sbci	r19, 0x09	; 9
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <tc45_enable+0x4a>
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	95 dd       	rcall	.-1238   	; 0x516 <sysclk_enable_module>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	92 dd       	rcall	.-1244   	; 0x516 <sysclk_enable_module>
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <tc45_enable+0x4e>
     9f4:	cf bf       	out	0x3f, r28	; 63
     9f6:	09 c0       	rjmp	.+18     	; 0xa0a <tc45_enable+0x60>
     9f8:	8f b7       	in	r24, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	e5 e5       	ldi	r30, 0x55	; 85
     9fe:	f0 e2       	ldi	r31, 0x20	; 32
     a00:	90 81       	ld	r25, Z
     a02:	9f 5f       	subi	r25, 0xFF	; 255
     a04:	90 83       	st	Z, r25
     a06:	8f bf       	out	0x3f, r24	; 63
     a08:	cf bf       	out	0x3f, r28	; 63
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
     a0e:	81 15       	cp	r24, r1
     a10:	28 e0       	ldi	r18, 0x08	; 8
     a12:	92 07       	cpc	r25, r18
     a14:	29 f4       	brne	.+10     	; 0xa20 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
     a16:	60 93 28 20 	sts	0x2028, r22
     a1a:	70 93 29 20 	sts	0x2029, r23
     a1e:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	28 e0       	ldi	r18, 0x08	; 8
     a24:	92 07       	cpc	r25, r18
     a26:	29 f4       	brne	.+10     	; 0xa32 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
     a28:	60 93 1c 20 	sts	0x201C, r22
     a2c:	70 93 1d 20 	sts	0x201D, r23
     a30:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
     a32:	80 34       	cpi	r24, 0x40	; 64
     a34:	99 40       	sbci	r25, 0x09	; 9
     a36:	21 f4       	brne	.+8      	; 0xa40 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
     a38:	60 93 14 20 	sts	0x2014, r22
     a3c:	70 93 15 20 	sts	0x2015, r23
     a40:	08 95       	ret

00000a42 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     a42:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     a44:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     a46:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     a48:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     a4a:	60 83       	st	Z, r22
	ret                             // Return to caller
     a4c:	08 95       	ret

00000a4e <sleep>:
void sleep(void);
void init_interrupts(void);
void init(void);

void sleep(){
	wdt_disable();
     a4e:	16 dd       	rcall	.-1492   	; 0x47c <wdt_disable>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
     a50:	e8 e4       	ldi	r30, 0x48	; 72
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	81 7f       	andi	r24, 0xF1	; 241
     a58:	84 60       	ori	r24, 0x04	; 4
     a5a:	80 83       	st	Z, r24
	sleep_set_mode(SLEEP_SMODE_PDOWN_gc);
	
	sleep_enable();
     a5c:	80 81       	ld	r24, Z
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	80 83       	st	Z, r24
	sleep_enter();
     a62:	88 95       	sleep
	sleep_disable();
     a64:	80 81       	ld	r24, Z
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	80 83       	st	Z, r24
	wdt_enable();
     a6a:	10 dd       	rcall	.-1504   	; 0x48c <wdt_enable>
	sleep_timer=0;
     a6c:	10 92 2e 20 	sts	0x202E, r1
     a70:	10 92 2f 20 	sts	0x202F, r1
     a74:	08 95       	ret

00000a76 <debouncer>:
* it is called by TC45 callback function
********************************************************/
void debouncer(void)
{
	bool noaction=true;
	b_time++;
     a76:	80 91 5c 20 	lds	r24, 0x205C
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 93 5c 20 	sts	0x205C, r24

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f6 e0       	ldi	r31, 0x06	; 6
     a84:	80 85       	ldd	r24, Z+8	; 0x08
	if(!ioport_get_value(BUTTON1))
     a86:	81 fd       	sbrc	r24, 1
     a88:	11 c0       	rjmp	.+34     	; 0xaac <debouncer+0x36>
	{
		b1c++;
     a8a:	80 91 51 20 	lds	r24, 0x2051
     a8e:	90 91 52 20 	lds	r25, 0x2052
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	80 93 51 20 	sts	0x2051, r24
     a98:	90 93 52 20 	sts	0x2052, r25
		noaction=false;
		state=0;
     a9c:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     aa0:	10 92 30 20 	sts	0x2030, r1
     aa4:	10 92 31 20 	sts	0x2031, r1
	bool noaction=true;
	b_time++;
	if(!ioport_get_value(BUTTON1))
	{
		b1c++;
		noaction=false;
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	0d c0       	rjmp	.+26     	; 0xac6 <debouncer+0x50>
		state=0;
		global_time=0;
	}
	else{
		if (b1c>0){//b1c--;
     aac:	80 91 51 20 	lds	r24, 0x2051
     ab0:	90 91 52 20 	lds	r25, 0x2052
     ab4:	89 2b       	or	r24, r25
     ab6:	31 f0       	breq	.+12     	; 0xac4 <debouncer+0x4e>
			b1c=0;
     ab8:	10 92 51 20 	sts	0x2051, r1
     abc:	10 92 52 20 	sts	0x2052, r1
* this function rapidly checks for double action button domes state
* it is called by TC45 callback function
********************************************************/
void debouncer(void)
{
	bool noaction=true;
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <debouncer+0x50>
     ac4:	21 e0       	ldi	r18, 0x01	; 1
     ac6:	e0 e0       	ldi	r30, 0x00	; 0
     ac8:	f6 e0       	ldi	r31, 0x06	; 6
     aca:	80 85       	ldd	r24, Z+8	; 0x08
			b1c=0;
		}
		
	}
	
	if(!ioport_get_value(BUTTON2))
     acc:	80 fd       	sbrc	r24, 0
     ace:	11 c0       	rjmp	.+34     	; 0xaf2 <debouncer+0x7c>
	{
		b2c++;
     ad0:	80 91 4f 20 	lds	r24, 0x204F
     ad4:	90 91 50 20 	lds	r25, 0x2050
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	80 93 4f 20 	sts	0x204F, r24
     ade:	90 93 50 20 	sts	0x2050, r25
		noaction=false;
		state=0;
     ae2:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     ae6:	10 92 30 20 	sts	0x2030, r1
     aea:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON2))
	{
		b2c++;
		noaction=false;
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	0a c0       	rjmp	.+20     	; 0xb06 <debouncer+0x90>
		state=0;
		global_time=0;
	}
	else{
		if (b2c>0){//b2c--;
     af2:	80 91 4f 20 	lds	r24, 0x204F
     af6:	90 91 50 20 	lds	r25, 0x2050
     afa:	89 2b       	or	r24, r25
     afc:	21 f0       	breq	.+8      	; 0xb06 <debouncer+0x90>
			b2c=0;
     afe:	10 92 4f 20 	sts	0x204F, r1
     b02:	10 92 50 20 	sts	0x2050, r1
     b06:	e0 e0       	ldi	r30, 0x00	; 0
     b08:	f6 e0       	ldi	r31, 0x06	; 6
     b0a:	80 85       	ldd	r24, Z+8	; 0x08
		}

		
	}
	
	if(!ioport_get_value(BUTTON3))
     b0c:	83 fd       	sbrc	r24, 3
     b0e:	11 c0       	rjmp	.+34     	; 0xb32 <debouncer+0xbc>
	{
		b3c++;
     b10:	80 91 4d 20 	lds	r24, 0x204D
     b14:	90 91 4e 20 	lds	r25, 0x204E
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	80 93 4d 20 	sts	0x204D, r24
     b1e:	90 93 4e 20 	sts	0x204E, r25
		noaction=false;
		state=0;
     b22:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     b26:	10 92 30 20 	sts	0x2030, r1
     b2a:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON3))
	{
		b3c++;
		noaction=false;
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <debouncer+0xd0>
		state=0;
		global_time=0;
	}
	else{
		if (b3c>0){//b3c--;
     b32:	80 91 4d 20 	lds	r24, 0x204D
     b36:	90 91 4e 20 	lds	r25, 0x204E
     b3a:	89 2b       	or	r24, r25
     b3c:	21 f0       	breq	.+8      	; 0xb46 <debouncer+0xd0>
			b3c=0;
     b3e:	10 92 4d 20 	sts	0x204D, r1
     b42:	10 92 4e 20 	sts	0x204E, r1
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f6 e0       	ldi	r31, 0x06	; 6
     b4a:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}
	
	if(!ioport_get_value(BUTTON4))
     b4c:	85 fd       	sbrc	r24, 5
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <debouncer+0xfc>
	{
		b4c++;
     b50:	80 91 4b 20 	lds	r24, 0x204B
     b54:	90 91 4c 20 	lds	r25, 0x204C
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	80 93 4b 20 	sts	0x204B, r24
     b5e:	90 93 4c 20 	sts	0x204C, r25
		noaction=false;
		state=0;
     b62:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     b66:	10 92 30 20 	sts	0x2030, r1
     b6a:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON4))
	{
		b4c++;
		noaction=false;
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <debouncer+0x110>
		state=0;
		global_time=0;
	}
	else{
		if (b4c>0){//b4c--;
     b72:	80 91 4b 20 	lds	r24, 0x204B
     b76:	90 91 4c 20 	lds	r25, 0x204C
     b7a:	89 2b       	or	r24, r25
     b7c:	21 f0       	breq	.+8      	; 0xb86 <debouncer+0x110>
			b4c=0;
     b7e:	10 92 4b 20 	sts	0x204B, r1
     b82:	10 92 4c 20 	sts	0x204C, r1
     b86:	e0 e6       	ldi	r30, 0x60	; 96
     b88:	f6 e0       	ldi	r31, 0x06	; 6
     b8a:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}
	
	if(!ioport_get_value(BUTTON5))
     b8c:	80 fd       	sbrc	r24, 0
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <debouncer+0x13c>
	{
		b5c++;
     b90:	80 91 49 20 	lds	r24, 0x2049
     b94:	90 91 4a 20 	lds	r25, 0x204A
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	80 93 49 20 	sts	0x2049, r24
     b9e:	90 93 4a 20 	sts	0x204A, r25
		noaction=false;
		state=0;
     ba2:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     ba6:	10 92 30 20 	sts	0x2030, r1
     baa:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON5))
	{
		b5c++;
		noaction=false;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <debouncer+0x150>
		state=0;
		global_time=0;
	}
	else{
		if (b5c>0){//b5c--;
     bb2:	80 91 49 20 	lds	r24, 0x2049
     bb6:	90 91 4a 20 	lds	r25, 0x204A
     bba:	89 2b       	or	r24, r25
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <debouncer+0x150>
		b5c=0;}
     bbe:	10 92 49 20 	sts	0x2049, r1
     bc2:	10 92 4a 20 	sts	0x204A, r1
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	80 85       	ldd	r24, Z+8	; 0x08
	}
	
	if(!ioport_get_value(BUTTON6))
     bcc:	80 fd       	sbrc	r24, 0
     bce:	11 c0       	rjmp	.+34     	; 0xbf2 <debouncer+0x17c>
	{
		b6c++;
     bd0:	80 91 47 20 	lds	r24, 0x2047
     bd4:	90 91 48 20 	lds	r25, 0x2048
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	80 93 47 20 	sts	0x2047, r24
     bde:	90 93 48 20 	sts	0x2048, r25
		noaction=false;
		state=0;
     be2:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     be6:	10 92 30 20 	sts	0x2030, r1
     bea:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON6))
	{
		b6c++;
		noaction=false;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <debouncer+0x190>
		state=0;
		global_time=0;
	}
	else{
		if (b6c>0){//b6c--;
     bf2:	80 91 47 20 	lds	r24, 0x2047
     bf6:	90 91 48 20 	lds	r25, 0x2048
     bfa:	89 2b       	or	r24, r25
     bfc:	21 f0       	breq	.+8      	; 0xc06 <debouncer+0x190>
			b6c=0;
     bfe:	10 92 47 20 	sts	0x2047, r1
     c02:	10 92 48 20 	sts	0x2048, r1
     c06:	e0 e6       	ldi	r30, 0x60	; 96
     c08:	f6 e0       	ldi	r31, 0x06	; 6
     c0a:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
	}
	
	if(!ioport_get_value(BUTTON7))
     c0c:	85 fd       	sbrc	r24, 5
     c0e:	11 c0       	rjmp	.+34     	; 0xc32 <debouncer+0x1bc>
	{
		b7c++;
     c10:	80 91 45 20 	lds	r24, 0x2045
     c14:	90 91 46 20 	lds	r25, 0x2046
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	80 93 45 20 	sts	0x2045, r24
     c1e:	90 93 46 20 	sts	0x2046, r25
		noaction=false;
		state=0;
     c22:	10 92 32 20 	sts	0x2032, r1
		global_time=0;
     c26:	10 92 30 20 	sts	0x2030, r1
     c2a:	10 92 31 20 	sts	0x2031, r1
	}
	
	if(!ioport_get_value(BUTTON7))
	{
		b7c++;
		noaction=false;
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <debouncer+0x1d0>
		state=0;
		global_time=0;
	}
	else{
		if (b7c>0){//b7c--;
     c32:	80 91 45 20 	lds	r24, 0x2045
     c36:	90 91 46 20 	lds	r25, 0x2046
     c3a:	89 2b       	or	r24, r25
     c3c:	21 f0       	breq	.+8      	; 0xc46 <debouncer+0x1d0>
			b7c=0;
     c3e:	10 92 45 20 	sts	0x2045, r1
     c42:	10 92 46 20 	sts	0x2046, r1
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}
	
	if(!ioport_get_value(BUTTON51))
     c4c:	81 fd       	sbrc	r24, 1
     c4e:	0a c0       	rjmp	.+20     	; 0xc64 <debouncer+0x1ee>
	{
		b8c++;
     c50:	80 91 43 20 	lds	r24, 0x2043
     c54:	90 91 44 20 	lds	r25, 0x2044
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	80 93 43 20 	sts	0x2043, r24
     c5e:	90 93 44 20 	sts	0x2044, r25
     c62:	0f c0       	rjmp	.+30     	; 0xc82 <debouncer+0x20c>
	//	noaction=false;
	}
	else{
		if (b8c>0){b8c--;
     c64:	80 91 43 20 	lds	r24, 0x2043
     c68:	90 91 44 20 	lds	r25, 0x2044
     c6c:	89 2b       	or	r24, r25
     c6e:	49 f0       	breq	.+18     	; 0xc82 <debouncer+0x20c>
     c70:	80 91 43 20 	lds	r24, 0x2043
     c74:	90 91 44 20 	lds	r25, 0x2044
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	80 93 43 20 	sts	0x2043, r24
     c7e:	90 93 44 20 	sts	0x2044, r25
     c82:	e0 e6       	ldi	r30, 0x60	; 96
     c84:	f6 e0       	ldi	r31, 0x06	; 6
     c86:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}
	
	if(!ioport_get_value(BUTTON71))
     c88:	86 fd       	sbrc	r24, 6
     c8a:	0a c0       	rjmp	.+20     	; 0xca0 <debouncer+0x22a>
	{
		b9c++;
     c8c:	80 91 41 20 	lds	r24, 0x2041
     c90:	90 91 42 20 	lds	r25, 0x2042
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	80 93 41 20 	sts	0x2041, r24
     c9a:	90 93 42 20 	sts	0x2042, r25
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <debouncer+0x248>
	//	noaction=false;
	}
	else{
		if (b9c>0){b9c--;
     ca0:	80 91 41 20 	lds	r24, 0x2041
     ca4:	90 91 42 20 	lds	r25, 0x2042
     ca8:	89 2b       	or	r24, r25
     caa:	49 f0       	breq	.+18     	; 0xcbe <debouncer+0x248>
     cac:	80 91 41 20 	lds	r24, 0x2041
     cb0:	90 91 42 20 	lds	r25, 0x2042
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	80 93 41 20 	sts	0x2041, r24
     cba:	90 93 42 20 	sts	0x2042, r25
     cbe:	e0 e0       	ldi	r30, 0x00	; 0
     cc0:	f6 e0       	ldi	r31, 0x06	; 6
     cc2:	80 85       	ldd	r24, Z+8	; 0x08
			//b9c=0;
		}
	}
	
	if(!ioport_get_value(BUTTON41))
     cc4:	86 fd       	sbrc	r24, 6
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <debouncer+0x266>
	{
		b10c++;
     cc8:	80 91 3f 20 	lds	r24, 0x203F
     ccc:	90 91 40 20 	lds	r25, 0x2040
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	80 93 3f 20 	sts	0x203F, r24
     cd6:	90 93 40 20 	sts	0x2040, r25
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <debouncer+0x284>
	//	noaction=false;
	}
	else{
		if (b10c>0){b10c--;
     cdc:	80 91 3f 20 	lds	r24, 0x203F
     ce0:	90 91 40 20 	lds	r25, 0x2040
     ce4:	89 2b       	or	r24, r25
     ce6:	49 f0       	breq	.+18     	; 0xcfa <debouncer+0x284>
     ce8:	80 91 3f 20 	lds	r24, 0x203F
     cec:	90 91 40 20 	lds	r25, 0x2040
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	80 93 3f 20 	sts	0x203F, r24
     cf6:	90 93 40 20 	sts	0x2040, r25
     cfa:	e0 e0       	ldi	r30, 0x00	; 0
     cfc:	f6 e0       	ldi	r31, 0x06	; 6
     cfe:	80 85       	ldd	r24, Z+8	; 0x08
			//b10c=0;
		}
	}
	
	if(!ioport_get_value(BUTTON31))
     d00:	84 fd       	sbrc	r24, 4
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <debouncer+0x2a2>
	{
		b11c++;
     d04:	80 91 3d 20 	lds	r24, 0x203D
     d08:	90 91 3e 20 	lds	r25, 0x203E
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	80 93 3d 20 	sts	0x203D, r24
     d12:	90 93 3e 20 	sts	0x203E, r25
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <debouncer+0x2c0>
	//	noaction=false;
	}
	else{
		if (b11c>0){b11c--;
     d18:	80 91 3d 20 	lds	r24, 0x203D
     d1c:	90 91 3e 20 	lds	r25, 0x203E
     d20:	89 2b       	or	r24, r25
     d22:	49 f0       	breq	.+18     	; 0xd36 <debouncer+0x2c0>
     d24:	80 91 3d 20 	lds	r24, 0x203D
     d28:	90 91 3e 20 	lds	r25, 0x203E
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	80 93 3d 20 	sts	0x203D, r24
     d32:	90 93 3e 20 	sts	0x203E, r25
     d36:	e0 e6       	ldi	r30, 0x60	; 96
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}
	
	if(!ioport_get_value(BUTTON61))
     d3c:	81 fd       	sbrc	r24, 1
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <debouncer+0x2de>
	{
		b12c++;
     d40:	80 91 3b 20 	lds	r24, 0x203B
     d44:	90 91 3c 20 	lds	r25, 0x203C
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	80 93 3b 20 	sts	0x203B, r24
     d4e:	90 93 3c 20 	sts	0x203C, r25
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <debouncer+0x2fc>
	//	noaction=false;
	}
	else{
		if (b12c>0){b12c--;
     d54:	80 91 3b 20 	lds	r24, 0x203B
     d58:	90 91 3c 20 	lds	r25, 0x203C
     d5c:	89 2b       	or	r24, r25
     d5e:	49 f0       	breq	.+18     	; 0xd72 <debouncer+0x2fc>
     d60:	80 91 3b 20 	lds	r24, 0x203B
     d64:	90 91 3c 20 	lds	r25, 0x203C
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	80 93 3b 20 	sts	0x203B, r24
     d6e:	90 93 3c 20 	sts	0x203C, r25
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		
	}

	if(ioport_get_value(BUTTONWAKEUP))
     d78:	82 ff       	sbrs	r24, 2
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <debouncer+0x32e>
	{
		b13c++;
     d7c:	80 91 37 20 	lds	r24, 0x2037
     d80:	90 91 38 20 	lds	r25, 0x2038
     d84:	a0 91 39 20 	lds	r26, 0x2039
     d88:	b0 91 3a 20 	lds	r27, 0x203A
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	a1 1d       	adc	r26, r1
     d90:	b1 1d       	adc	r27, r1
     d92:	80 93 37 20 	sts	0x2037, r24
     d96:	90 93 38 20 	sts	0x2038, r25
     d9a:	a0 93 39 20 	sts	0x2039, r26
     d9e:	b0 93 3a 20 	sts	0x203A, r27
     da2:	1f c0       	rjmp	.+62     	; 0xde2 <debouncer+0x36c>
	}
	else{
		if (b13c>0){b13c--;
     da4:	80 91 37 20 	lds	r24, 0x2037
     da8:	90 91 38 20 	lds	r25, 0x2038
     dac:	a0 91 39 20 	lds	r26, 0x2039
     db0:	b0 91 3a 20 	lds	r27, 0x203A
     db4:	89 2b       	or	r24, r25
     db6:	8a 2b       	or	r24, r26
     db8:	8b 2b       	or	r24, r27
     dba:	99 f0       	breq	.+38     	; 0xde2 <debouncer+0x36c>
     dbc:	80 91 37 20 	lds	r24, 0x2037
     dc0:	90 91 38 20 	lds	r25, 0x2038
     dc4:	a0 91 39 20 	lds	r26, 0x2039
     dc8:	b0 91 3a 20 	lds	r27, 0x203A
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	a1 09       	sbc	r26, r1
     dd0:	b1 09       	sbc	r27, r1
     dd2:	80 93 37 20 	sts	0x2037, r24
     dd6:	90 93 38 20 	sts	0x2038, r25
     dda:	a0 93 39 20 	sts	0x2039, r26
     dde:	b0 93 3a 20 	sts	0x203A, r27
     de2:	e0 e4       	ldi	r30, 0x40	; 64
     de4:	f6 e0       	ldi	r31, 0x06	; 6
     de6:	80 85       	ldd	r24, Z+8	; 0x08
			//b13c=0;
		}
	}
	
	if(ioport_get_value(IMXWAKEUP))
     de8:	82 ff       	sbrs	r24, 2
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <debouncer+0x39e>
	{
		b14c++;
     dec:	80 91 33 20 	lds	r24, 0x2033
     df0:	90 91 34 20 	lds	r25, 0x2034
     df4:	a0 91 35 20 	lds	r26, 0x2035
     df8:	b0 91 36 20 	lds	r27, 0x2036
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	a1 1d       	adc	r26, r1
     e00:	b1 1d       	adc	r27, r1
     e02:	80 93 33 20 	sts	0x2033, r24
     e06:	90 93 34 20 	sts	0x2034, r25
     e0a:	a0 93 35 20 	sts	0x2035, r26
     e0e:	b0 93 36 20 	sts	0x2036, r27
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <debouncer+0x3dc>
	}
	else{
		if (b14c>0){b14c--;
     e14:	80 91 33 20 	lds	r24, 0x2033
     e18:	90 91 34 20 	lds	r25, 0x2034
     e1c:	a0 91 35 20 	lds	r26, 0x2035
     e20:	b0 91 36 20 	lds	r27, 0x2036
     e24:	89 2b       	or	r24, r25
     e26:	8a 2b       	or	r24, r26
     e28:	8b 2b       	or	r24, r27
     e2a:	99 f0       	breq	.+38     	; 0xe52 <debouncer+0x3dc>
     e2c:	80 91 33 20 	lds	r24, 0x2033
     e30:	90 91 34 20 	lds	r25, 0x2034
     e34:	a0 91 35 20 	lds	r26, 0x2035
     e38:	b0 91 36 20 	lds	r27, 0x2036
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	a1 09       	sbc	r26, r1
     e40:	b1 09       	sbc	r27, r1
     e42:	80 93 33 20 	sts	0x2033, r24
     e46:	90 93 34 20 	sts	0x2034, r25
     e4a:	a0 93 35 20 	sts	0x2035, r26
     e4e:	b0 93 36 20 	sts	0x2036, r27
			//b14c=0;
		}
	}
	if(noaction) sleep_timer++;
     e52:	22 23       	and	r18, r18
     e54:	51 f0       	breq	.+20     	; 0xe6a <debouncer+0x3f4>
     e56:	80 91 2e 20 	lds	r24, 0x202E
     e5a:	90 91 2f 20 	lds	r25, 0x202F
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	80 93 2e 20 	sts	0x202E, r24
     e64:	90 93 2f 20 	sts	0x202F, r25
     e68:	08 95       	ret
	else sleep_timer=0;
     e6a:	10 92 2e 20 	sts	0x202E, r1
     e6e:	10 92 2f 20 	sts	0x202F, r1
     e72:	08 95       	ret

00000e74 <my_callback>:
************************************************************************/

static void my_callback(void)
{
	// User code to execute when the overflow occurs here
	debouncer();
     e74:	00 de       	rcall	.-1024   	; 0xa76 <debouncer>
	t_time++;
     e76:	80 91 69 20 	lds	r24, 0x2069
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	80 93 69 20 	sts	0x2069, r24
	b_time++;
     e80:	80 91 5c 20 	lds	r24, 0x205C
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	80 93 5c 20 	sts	0x205C, r24
	global_time++;
     e8a:	80 91 30 20 	lds	r24, 0x2030
     e8e:	90 91 31 20 	lds	r25, 0x2031
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	80 93 30 20 	sts	0x2030, r24
     e98:	90 93 31 20 	sts	0x2031, r25
	
	if (global_time>2000)
     e9c:	80 91 30 20 	lds	r24, 0x2030
     ea0:	90 91 31 20 	lds	r25, 0x2031
     ea4:	81 3d       	cpi	r24, 0xD1	; 209
     ea6:	97 40       	sbci	r25, 0x07	; 7
     ea8:	68 f0       	brcs	.+26     	; 0xec4 <my_callback+0x50>
	{
		global_time=0;
     eaa:	10 92 30 20 	sts	0x2030, r1
     eae:	10 92 31 20 	sts	0x2031, r1
		sleep_timer++;
     eb2:	80 91 2e 20 	lds	r24, 0x202E
     eb6:	90 91 2f 20 	lds	r25, 0x202F
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	80 93 2e 20 	sts	0x202E, r24
     ec0:	90 93 2f 20 	sts	0x202F, r25
 * \note  OVFIF is cleared
 */
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	f8 e0       	ldi	r31, 0x08	; 8
     ec8:	84 85       	ldd	r24, Z+12	; 0x0c
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	84 87       	std	Z+12, r24	; 0x0c
     ece:	08 95       	ret

00000ed0 <buttons_worker>:
*
* output none
* effect sending uart message
*/
void buttons_worker(volatile uint16_t* counter,volatile uint8_t* button, uint8_t number)
{
     ed0:	dc 01       	movw	r26, r24
     ed2:	fb 01       	movw	r30, r22

	if((*counter>buttondebouncestart)&&(*counter<buttondebouncestop)&&(*button==SERVED_RELEASED)){
     ed4:	2d 91       	ld	r18, X+
     ed6:	3c 91       	ld	r19, X
     ed8:	11 97       	sbiw	r26, 0x01	; 1
     eda:	80 91 0c 20 	lds	r24, 0x200C
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	82 17       	cp	r24, r18
     ee2:	93 07       	cpc	r25, r19
     ee4:	70 f4       	brcc	.+28     	; 0xf02 <buttons_worker+0x32>
     ee6:	2d 91       	ld	r18, X+
     ee8:	3c 91       	ld	r19, X
     eea:	11 97       	sbiw	r26, 0x01	; 1
     eec:	80 91 0b 20 	lds	r24, 0x200B
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	28 17       	cp	r18, r24
     ef4:	39 07       	cpc	r19, r25
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <buttons_worker+0x32>
     ef8:	80 81       	ld	r24, Z
     efa:	81 11       	cpse	r24, r1
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <buttons_worker+0x32>
		*button=PUSHED;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
	}

	if((*counter>buttondebouncerepetition)&&((*button==SERVED_REPETITION)||(*button==SERVED_PUSHED))){
     f02:	2d 91       	ld	r18, X+
     f04:	3c 91       	ld	r19, X
     f06:	11 97       	sbiw	r26, 0x01	; 1
     f08:	80 91 0a 20 	lds	r24, 0x200A
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	82 17       	cp	r24, r18
     f10:	93 07       	cpc	r25, r19
     f12:	a8 f4       	brcc	.+42     	; 0xf3e <buttons_worker+0x6e>
     f14:	80 81       	ld	r24, Z
     f16:	85 30       	cpi	r24, 0x05	; 5
     f18:	19 f0       	breq	.+6      	; 0xf20 <buttons_worker+0x50>
     f1a:	80 81       	ld	r24, Z
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	79 f4       	brne	.+30     	; 0xf3e <buttons_worker+0x6e>
		*counter=buttondebouncerepetitionreset;
     f20:	80 91 09 20 	lds	r24, 0x2009
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	8d 93       	st	X+, r24
     f28:	9c 93       	st	X, r25
     f2a:	11 97       	sbiw	r26, 0x01	; 1
		if (buttondebouncerepetitionreset<BUTTONDEBOUNCERREPETITIONRESETSHORT)
     f2c:	80 91 09 20 	lds	r24, 0x2009
     f30:	83 34       	cpi	r24, 0x43	; 67
     f32:	18 f4       	brcc	.+6      	; 0xf3a <buttons_worker+0x6a>
		{
			buttondebouncerepetitionreset+=BUTTONDEBOUNCERREPETITIONSTEP;
     f34:	8e 5f       	subi	r24, 0xFE	; 254
     f36:	80 93 09 20 	sts	0x2009, r24
		}
		
		*button=REPETITION;
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	80 83       	st	Z, r24
	}
	
	if((*button==SERVED_PUSHED||*button==SERVED_REPETITION)&&*counter<=buttondebouncereleased){
     f3e:	80 81       	ld	r24, Z
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	19 f0       	breq	.+6      	; 0xf4a <buttons_worker+0x7a>
     f44:	80 81       	ld	r24, Z
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	69 f4       	brne	.+26     	; 0xf64 <buttons_worker+0x94>
     f4a:	2d 91       	ld	r18, X+
     f4c:	3c 91       	ld	r19, X
     f4e:	80 91 08 20 	lds	r24, 0x2008
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	82 17       	cp	r24, r18
     f56:	93 07       	cpc	r25, r19
     f58:	28 f0       	brcs	.+10     	; 0xf64 <buttons_worker+0x94>
		*button=RELEASED;
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
		buttondebouncerepetitionreset=BUTTONDEBOUNCERREPETITIONRESETLONG;
     f5e:	80 e3       	ldi	r24, 0x30	; 48
     f60:	80 93 09 20 	sts	0x2009, r24
	}
	
	if(*button==RELEASED||*button==PUSHED||*button==REPETITION){
     f64:	80 81       	ld	r24, Z
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	39 f0       	breq	.+14     	; 0xf78 <buttons_worker+0xa8>
     f6a:	80 81       	ld	r24, Z
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	21 f0       	breq	.+8      	; 0xf78 <buttons_worker+0xa8>
     f70:	80 81       	ld	r24, Z
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	09 f0       	breq	.+2      	; 0xf78 <buttons_worker+0xa8>
     f76:	45 c0       	rjmp	.+138    	; 0x1002 <buttons_worker+0x132>
		b_data+=number;
     f78:	80 91 6a 20 	lds	r24, 0x206A
     f7c:	48 0f       	add	r20, r24
     f7e:	40 93 6a 20 	sts	0x206A, r20
		
		if (*button==PUSHED)
     f82:	80 81       	ld	r24, Z
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	39 f4       	brne	.+14     	; 0xf96 <buttons_worker+0xc6>
		{
			*button=SERVED_PUSHED;
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	80 83       	st	Z, r24
			b_data+=PUSHED;
     f8c:	80 91 6a 20 	lds	r24, 0x206A
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 6a 20 	sts	0x206A, r24
			
		}
		
		if (*button==REPETITION)
     f96:	80 81       	ld	r24, Z
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	39 f4       	brne	.+14     	; 0xfaa <buttons_worker+0xda>
		{
			*button=SERVED_REPETITION;
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	80 83       	st	Z, r24
			b_data+=REPETITION;
     fa0:	80 91 6a 20 	lds	r24, 0x206A
     fa4:	8d 5f       	subi	r24, 0xFD	; 253
     fa6:	80 93 6a 20 	sts	0x206A, r24
			
		}
		if (*button==RELEASED)
     faa:	80 81       	ld	r24, Z
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	31 f4       	brne	.+12     	; 0xfbc <buttons_worker+0xec>
		{
			*button=SERVED_RELEASED;
     fb0:	10 82       	st	Z, r1
			b_data+=RELEASED;
     fb2:	80 91 6a 20 	lds	r24, 0x206A
     fb6:	8e 5f       	subi	r24, 0xFE	; 254
     fb8:	80 93 6a 20 	sts	0x206A, r24
			
		}
		
		if (b_data!=0)
     fbc:	80 91 6a 20 	lds	r24, 0x206A
     fc0:	88 23       	and	r24, r24
     fc2:	f9 f0       	breq	.+62     	; 0x1002 <buttons_worker+0x132>
		{
			
		if (!lock)
     fc4:	80 91 53 20 	lds	r24, 0x2053
     fc8:	81 11       	cpse	r24, r1
     fca:	1b c0       	rjmp	.+54     	; 0x1002 <buttons_worker+0x132>
		{
		
			cli();
     fcc:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
     fce:	65 ea       	ldi	r22, 0xA5	; 165
     fd0:	80 ec       	ldi	r24, 0xC0	; 192
     fd2:	99 e0       	ldi	r25, 0x09	; 9
     fd4:	89 d8       	rcall	.-3822   	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,b_time);
     fd6:	60 91 5c 20 	lds	r22, 0x205C
     fda:	80 ec       	ldi	r24, 0xC0	; 192
     fdc:	99 e0       	ldi	r25, 0x09	; 9
     fde:	84 d8       	rcall	.-3832   	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,b_data);
     fe0:	60 91 6a 20 	lds	r22, 0x206A
     fe4:	80 ec       	ldi	r24, 0xC0	; 192
     fe6:	99 e0       	ldi	r25, 0x09	; 9
     fe8:	7f d8       	rcall	.-3842   	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,b_time + b_data + 0xa5);
     fea:	60 91 5c 20 	lds	r22, 0x205C
     fee:	80 91 6a 20 	lds	r24, 0x206A
     ff2:	68 0f       	add	r22, r24
     ff4:	6b 55       	subi	r22, 0x5B	; 91
     ff6:	80 ec       	ldi	r24, 0xC0	; 192
     ff8:	99 e0       	ldi	r25, 0x09	; 9
     ffa:	76 d8       	rcall	.-3860   	; 0xe8 <usart_putchar>
			sei();
     ffc:	78 94       	sei
			b_data=0;
     ffe:	10 92 6a 20 	sts	0x206A, r1
    1002:	08 95       	ret

00001004 <lock_worker>:
	}
}


void lock_worker(volatile uint32_t* counter,volatile uint8_t* button, uint8_t number)
{
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	fb 01       	movw	r30, r22

	if((*counter>buttondebouncestart)&&(*counter<buttondebouncestop)&&(*button==SERVED_RELEASED)){
    1012:	dc 01       	movw	r26, r24
    1014:	cd 90       	ld	r12, X+
    1016:	dd 90       	ld	r13, X+
    1018:	ed 90       	ld	r14, X+
    101a:	fc 90       	ld	r15, X
    101c:	13 97       	sbiw	r26, 0x03	; 3
    101e:	00 91 0c 20 	lds	r16, 0x200C
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	0c 15       	cp	r16, r12
    102a:	1d 05       	cpc	r17, r13
    102c:	2e 05       	cpc	r18, r14
    102e:	3f 05       	cpc	r19, r15
    1030:	98 f4       	brcc	.+38     	; 0x1058 <lock_worker+0x54>
    1032:	cd 90       	ld	r12, X+
    1034:	dd 90       	ld	r13, X+
    1036:	ed 90       	ld	r14, X+
    1038:	fc 90       	ld	r15, X
    103a:	00 91 0b 20 	lds	r16, 0x200B
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	c0 16       	cp	r12, r16
    1046:	d1 06       	cpc	r13, r17
    1048:	e2 06       	cpc	r14, r18
    104a:	f3 06       	cpc	r15, r19
    104c:	28 f4       	brcc	.+10     	; 0x1058 <lock_worker+0x54>
    104e:	20 81       	ld	r18, Z
    1050:	21 11       	cpse	r18, r1
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <lock_worker+0x54>
		*button=PUSHED;
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	20 83       	st	Z, r18
	}
	
	if((*button==SERVED_PUSHED)&&*counter<=buttondebouncereleased){
    1058:	20 81       	ld	r18, Z
    105a:	24 30       	cpi	r18, 0x04	; 4
    105c:	89 f4       	brne	.+34     	; 0x1080 <lock_worker+0x7c>
    105e:	dc 01       	movw	r26, r24
    1060:	0d 91       	ld	r16, X+
    1062:	1d 91       	ld	r17, X+
    1064:	2d 91       	ld	r18, X+
    1066:	3c 91       	ld	r19, X
    1068:	80 91 08 20 	lds	r24, 0x2008
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	80 17       	cp	r24, r16
    1074:	91 07       	cpc	r25, r17
    1076:	a2 07       	cpc	r26, r18
    1078:	b3 07       	cpc	r27, r19
    107a:	10 f0       	brcs	.+4      	; 0x1080 <lock_worker+0x7c>
		*button=RELEASED;
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	80 83       	st	Z, r24

	}
	
	if(*button==RELEASED||*button==PUSHED){
    1080:	80 81       	ld	r24, Z
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	19 f0       	breq	.+6      	; 0x108c <lock_worker+0x88>
    1086:	80 81       	ld	r24, Z
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	c1 f4       	brne	.+48     	; 0x10bc <lock_worker+0xb8>
		b_data+=number;
    108c:	80 91 6a 20 	lds	r24, 0x206A
    1090:	48 0f       	add	r20, r24
    1092:	40 93 6a 20 	sts	0x206A, r20
		
		if (*button==PUSHED)
    1096:	80 81       	ld	r24, Z
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	11 f4       	brne	.+4      	; 0x10a0 <lock_worker+0x9c>
		{
			*button=SERVED_PUSHED;
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	80 83       	st	Z, r24
			{
				lock=1;
			}*/
		}
		
		if (*button==RELEASED)
    10a0:	80 81       	ld	r24, Z
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	59 f4       	brne	.+22     	; 0x10bc <lock_worker+0xb8>
		{
			*button=SERVED_RELEASED;
    10a6:	10 82       	st	Z, r1
			if (!lock)
    10a8:	80 91 53 20 	lds	r24, 0x2053
    10ac:	81 11       	cpse	r24, r1
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <lock_worker+0xb4>
			{
				lock=1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 53 20 	sts	0x2053, r24
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <lock_worker+0xb8>
			}
			else
			{
				lock=0;
    10b8:	10 92 53 20 	sts	0x2053, r1
			}
		}

	}
}
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <buttons_dispatcher>:
/***
*function runs button worker function on parameters for each button
*it is called from main functin and it runs button worker function that determines sate of button.
*/
void buttons_dispatcher(void){
	buttons_worker(&b1c,&b1,B1);
    10ca:	40 e5       	ldi	r20, 0x50	; 80
    10cc:	6d e5       	ldi	r22, 0x5D	; 93
    10ce:	70 e2       	ldi	r23, 0x20	; 32
    10d0:	81 e5       	ldi	r24, 0x51	; 81
    10d2:	90 e2       	ldi	r25, 0x20	; 32
    10d4:	fd de       	rcall	.-518    	; 0xed0 <buttons_worker>
	buttons_worker(&b2c,&b2,B2);
    10d6:	40 e6       	ldi	r20, 0x60	; 96
    10d8:	6a e5       	ldi	r22, 0x5A	; 90
    10da:	70 e2       	ldi	r23, 0x20	; 32
    10dc:	8f e4       	ldi	r24, 0x4F	; 79
    10de:	90 e2       	ldi	r25, 0x20	; 32
    10e0:	f7 de       	rcall	.-530    	; 0xed0 <buttons_worker>
	buttons_worker(&b3c,&b3,B3);
    10e2:	40 e7       	ldi	r20, 0x70	; 112
    10e4:	6c e6       	ldi	r22, 0x6C	; 108
    10e6:	70 e2       	ldi	r23, 0x20	; 32
    10e8:	8d e4       	ldi	r24, 0x4D	; 77
    10ea:	90 e2       	ldi	r25, 0x20	; 32
    10ec:	f1 de       	rcall	.-542    	; 0xed0 <buttons_worker>
	buttons_worker(&b4c,&b4,B4);
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	65 e6       	ldi	r22, 0x65	; 101
    10f2:	70 e2       	ldi	r23, 0x20	; 32
    10f4:	8b e4       	ldi	r24, 0x4B	; 75
    10f6:	90 e2       	ldi	r25, 0x20	; 32
    10f8:	eb de       	rcall	.-554    	; 0xed0 <buttons_worker>
	buttons_worker(&b5c,&b5,B5);
    10fa:	40 e9       	ldi	r20, 0x90	; 144
    10fc:	6b e6       	ldi	r22, 0x6B	; 107
    10fe:	70 e2       	ldi	r23, 0x20	; 32
    1100:	89 e4       	ldi	r24, 0x49	; 73
    1102:	90 e2       	ldi	r25, 0x20	; 32
    1104:	e5 de       	rcall	.-566    	; 0xed0 <buttons_worker>
	buttons_worker(&b6c,&b6,B6);
    1106:	40 ea       	ldi	r20, 0xA0	; 160
    1108:	6d e6       	ldi	r22, 0x6D	; 109
    110a:	70 e2       	ldi	r23, 0x20	; 32
    110c:	87 e4       	ldi	r24, 0x47	; 71
    110e:	90 e2       	ldi	r25, 0x20	; 32
    1110:	df de       	rcall	.-578    	; 0xed0 <buttons_worker>
	buttons_worker(&b7c,&b7,B7);
    1112:	40 eb       	ldi	r20, 0xB0	; 176
    1114:	67 e6       	ldi	r22, 0x67	; 103
    1116:	70 e2       	ldi	r23, 0x20	; 32
    1118:	85 e4       	ldi	r24, 0x45	; 69
    111a:	90 e2       	ldi	r25, 0x20	; 32
    111c:	d9 de       	rcall	.-590    	; 0xed0 <buttons_worker>
	lock_worker(&b13c,&b13,BUTTONWAKEUP);
    111e:	42 e0       	ldi	r20, 0x02	; 2
    1120:	66 e6       	ldi	r22, 0x66	; 102
    1122:	70 e2       	ldi	r23, 0x20	; 32
    1124:	87 e3       	ldi	r24, 0x37	; 55
    1126:	90 e2       	ldi	r25, 0x20	; 32
    1128:	6d cf       	rjmp	.-294    	; 0x1004 <lock_worker>
    112a:	08 95       	ret

0000112c <huievent_decoder>:
///						BUTTON71 b9c
//////////////////////////////////////////////////////////////////////////

void huievent_decoder(){
	
	if(state==0){
    112c:	80 91 32 20 	lds	r24, 0x2032
    1130:	81 11       	cpse	r24, r1
    1132:	4b c0       	rjmp	.+150    	; 0x11ca <huievent_decoder+0x9e>
		if((b8c>debouncetouch)){
    1134:	80 91 07 20 	lds	r24, 0x2007
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	20 91 43 20 	lds	r18, 0x2043
    113e:	30 91 44 20 	lds	r19, 0x2044
    1142:	82 17       	cp	r24, r18
    1144:	93 07       	cpc	r25, r19
    1146:	58 f4       	brcc	.+22     	; 0x115e <huievent_decoder+0x32>
			state=1;//right
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	20 93 32 20 	sts	0x2032, r18
			gesturestart=global_time;
    114e:	20 91 30 20 	lds	r18, 0x2030
    1152:	30 91 31 20 	lds	r19, 0x2031
    1156:	20 93 2c 20 	sts	0x202C, r18
    115a:	30 93 2d 20 	sts	0x202D, r19
		}
		if((b9c>debouncetouch)){
    115e:	20 91 41 20 	lds	r18, 0x2041
    1162:	30 91 42 20 	lds	r19, 0x2042
    1166:	82 17       	cp	r24, r18
    1168:	93 07       	cpc	r25, r19
    116a:	58 f4       	brcc	.+22     	; 0x1182 <huievent_decoder+0x56>
			state=2;//down
    116c:	22 e0       	ldi	r18, 0x02	; 2
    116e:	20 93 32 20 	sts	0x2032, r18
			gesturestart=global_time;
    1172:	20 91 30 20 	lds	r18, 0x2030
    1176:	30 91 31 20 	lds	r19, 0x2031
    117a:	20 93 2c 20 	sts	0x202C, r18
    117e:	30 93 2d 20 	sts	0x202D, r19
		}
		if((b10c>debouncetouch)){
    1182:	20 91 3f 20 	lds	r18, 0x203F
    1186:	30 91 40 20 	lds	r19, 0x2040
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	58 f4       	brcc	.+22     	; 0x11a6 <huievent_decoder+0x7a>
			state=3;//left
    1190:	23 e0       	ldi	r18, 0x03	; 3
    1192:	20 93 32 20 	sts	0x2032, r18
			gesturestart=global_time;
    1196:	20 91 30 20 	lds	r18, 0x2030
    119a:	30 91 31 20 	lds	r19, 0x2031
    119e:	20 93 2c 20 	sts	0x202C, r18
    11a2:	30 93 2d 20 	sts	0x202D, r19
		}
		if((b11c>debouncetouch)){
    11a6:	20 91 3d 20 	lds	r18, 0x203D
    11aa:	30 91 3e 20 	lds	r19, 0x203E
    11ae:	82 17       	cp	r24, r18
    11b0:	93 07       	cpc	r25, r19
    11b2:	58 f4       	brcc	.+22     	; 0x11ca <huievent_decoder+0x9e>
			state=4;//up
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	80 93 32 20 	sts	0x2032, r24
			gesturestart=global_time;
    11ba:	80 91 30 20 	lds	r24, 0x2030
    11be:	90 91 31 20 	lds	r25, 0x2031
    11c2:	80 93 2c 20 	sts	0x202C, r24
    11c6:	90 93 2d 20 	sts	0x202D, r25
		}
	}
	
	if (//just move start to time when finger leaves first button
	(state==1 && b8c>debouncetouch)||
    11ca:	80 91 32 20 	lds	r24, 0x2032
			state=4;//up
			gesturestart=global_time;
		}
	}
	
	if (//just move start to time when finger leaves first button
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	51 f4       	brne	.+20     	; 0x11e6 <huievent_decoder+0xba>
	(state==1 && b8c>debouncetouch)||
    11d2:	80 91 43 20 	lds	r24, 0x2043
    11d6:	90 91 44 20 	lds	r25, 0x2044
    11da:	20 91 07 20 	lds	r18, 0x2007
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	50 f1       	brcs	.+84     	; 0x123a <huievent_decoder+0x10e>
	(state==2 && b9c>debouncetouch)||
    11e6:	80 91 32 20 	lds	r24, 0x2032
			gesturestart=global_time;
		}
	}
	
	if (//just move start to time when finger leaves first button
	(state==1 && b8c>debouncetouch)||
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	51 f4       	brne	.+20     	; 0x1202 <huievent_decoder+0xd6>
	(state==2 && b9c>debouncetouch)||
    11ee:	80 91 41 20 	lds	r24, 0x2041
    11f2:	90 91 42 20 	lds	r25, 0x2042
    11f6:	20 91 07 20 	lds	r18, 0x2007
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	e0 f0       	brcs	.+56     	; 0x123a <huievent_decoder+0x10e>
	(state==3 && b10c>debouncetouch)||
    1202:	80 91 32 20 	lds	r24, 0x2032
		}
	}
	
	if (//just move start to time when finger leaves first button
	(state==1 && b8c>debouncetouch)||
	(state==2 && b9c>debouncetouch)||
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	51 f4       	brne	.+20     	; 0x121e <huievent_decoder+0xf2>
	(state==3 && b10c>debouncetouch)||
    120a:	80 91 3f 20 	lds	r24, 0x203F
    120e:	90 91 40 20 	lds	r25, 0x2040
    1212:	20 91 07 20 	lds	r18, 0x2007
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	28 17       	cp	r18, r24
    121a:	39 07       	cpc	r19, r25
    121c:	70 f0       	brcs	.+28     	; 0x123a <huievent_decoder+0x10e>
	(state==4 && b11c>debouncetouch))
    121e:	80 91 32 20 	lds	r24, 0x2032
	}
	
	if (//just move start to time when finger leaves first button
	(state==1 && b8c>debouncetouch)||
	(state==2 && b9c>debouncetouch)||
	(state==3 && b10c>debouncetouch)||
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	91 f4       	brne	.+36     	; 0x124a <huievent_decoder+0x11e>
	(state==4 && b11c>debouncetouch))
    1226:	80 91 3d 20 	lds	r24, 0x203D
    122a:	90 91 3e 20 	lds	r25, 0x203E
    122e:	20 91 07 20 	lds	r18, 0x2007
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	28 17       	cp	r18, r24
    1236:	39 07       	cpc	r19, r25
    1238:	40 f4       	brcc	.+16     	; 0x124a <huievent_decoder+0x11e>
	{
		gesturestart= global_time;
    123a:	80 91 30 20 	lds	r24, 0x2030
    123e:	90 91 31 20 	lds	r25, 0x2031
    1242:	80 93 2c 20 	sts	0x202C, r24
    1246:	90 93 2d 20 	sts	0x202D, r25
	}
	//we must press middle button to determine proper direction of finger (detect wrapping)
	if((b12c>debouncetouch) && (state==1)){
    124a:	80 91 07 20 	lds	r24, 0x2007
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	20 91 3b 20 	lds	r18, 0x203B
    1254:	30 91 3c 20 	lds	r19, 0x203C
    1258:	82 17       	cp	r24, r18
    125a:	93 07       	cpc	r25, r19
    125c:	38 f4       	brcc	.+14     	; 0x126c <huievent_decoder+0x140>
    125e:	20 91 32 20 	lds	r18, 0x2032
    1262:	21 30       	cpi	r18, 0x01	; 1
    1264:	19 f4       	brne	.+6      	; 0x126c <huievent_decoder+0x140>
		state=5;//to left
    1266:	25 e0       	ldi	r18, 0x05	; 5
    1268:	20 93 32 20 	sts	0x2032, r18
	}
	if((b12c>debouncetouch) && (state==2)){
    126c:	20 91 3b 20 	lds	r18, 0x203B
    1270:	30 91 3c 20 	lds	r19, 0x203C
    1274:	82 17       	cp	r24, r18
    1276:	93 07       	cpc	r25, r19
    1278:	38 f4       	brcc	.+14     	; 0x1288 <huievent_decoder+0x15c>
    127a:	20 91 32 20 	lds	r18, 0x2032
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	19 f4       	brne	.+6      	; 0x1288 <huievent_decoder+0x15c>
		state=6;//to up
    1282:	26 e0       	ldi	r18, 0x06	; 6
    1284:	20 93 32 20 	sts	0x2032, r18
	}
	if((b12c>debouncetouch) && (state==3)){
    1288:	20 91 3b 20 	lds	r18, 0x203B
    128c:	30 91 3c 20 	lds	r19, 0x203C
    1290:	82 17       	cp	r24, r18
    1292:	93 07       	cpc	r25, r19
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <huievent_decoder+0x178>
    1296:	20 91 32 20 	lds	r18, 0x2032
    129a:	23 30       	cpi	r18, 0x03	; 3
    129c:	19 f4       	brne	.+6      	; 0x12a4 <huievent_decoder+0x178>
		state=7; //to right
    129e:	27 e0       	ldi	r18, 0x07	; 7
    12a0:	20 93 32 20 	sts	0x2032, r18
	}
	if((b12c>debouncetouch) && (state==4)){
    12a4:	20 91 3b 20 	lds	r18, 0x203B
    12a8:	30 91 3c 20 	lds	r19, 0x203C
    12ac:	82 17       	cp	r24, r18
    12ae:	93 07       	cpc	r25, r19
    12b0:	38 f4       	brcc	.+14     	; 0x12c0 <huievent_decoder+0x194>
    12b2:	20 91 32 20 	lds	r18, 0x2032
    12b6:	24 30       	cpi	r18, 0x04	; 4
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <huievent_decoder+0x194>
		state=8;	//to down
    12ba:	28 e0       	ldi	r18, 0x08	; 8
    12bc:	20 93 32 20 	sts	0x2032, r18
	}


	if ((state>0)&&(state<9)&&(global_time-gesturestart>LOWSPEEDTIMELIMIT))
    12c0:	20 91 32 20 	lds	r18, 0x2032
    12c4:	22 23       	and	r18, r18
    12c6:	69 f1       	breq	.+90     	; 0x1322 <huievent_decoder+0x1f6>
    12c8:	20 91 32 20 	lds	r18, 0x2032
    12cc:	29 30       	cpi	r18, 0x09	; 9
    12ce:	48 f5       	brcc	.+82     	; 0x1322 <huievent_decoder+0x1f6>
    12d0:	20 91 30 20 	lds	r18, 0x2030
    12d4:	30 91 31 20 	lds	r19, 0x2031
    12d8:	40 91 2c 20 	lds	r20, 0x202C
    12dc:	50 91 2d 20 	lds	r21, 0x202D
    12e0:	24 1b       	sub	r18, r20
    12e2:	35 0b       	sbc	r19, r21
    12e4:	25 36       	cpi	r18, 0x65	; 101
    12e6:	31 05       	cpc	r19, r1
    12e8:	e0 f0       	brcs	.+56     	; 0x1322 <huievent_decoder+0x1f6>
	{
		t_data=0;
    12ea:	10 92 6e 20 	sts	0x206E, r1
		state=0;
    12ee:	10 92 32 20 	sts	0x2032, r1
		b8c=0;
    12f2:	10 92 43 20 	sts	0x2043, r1
    12f6:	10 92 44 20 	sts	0x2044, r1
		b9c=0;
    12fa:	10 92 41 20 	sts	0x2041, r1
    12fe:	10 92 42 20 	sts	0x2042, r1
		b10c=0;
    1302:	10 92 3f 20 	sts	0x203F, r1
    1306:	10 92 40 20 	sts	0x2040, r1
		b11c=0;
    130a:	10 92 3d 20 	sts	0x203D, r1
    130e:	10 92 3e 20 	sts	0x203E, r1
		b12c=0;
    1312:	10 92 3b 20 	sts	0x203B, r1
    1316:	10 92 3c 20 	sts	0x203C, r1
		global_time=0;
    131a:	10 92 30 20 	sts	0x2030, r1
    131e:	10 92 31 20 	sts	0x2031, r1
	}


	if ((state==5)&&(b10c>debouncetouch))
    1322:	20 91 32 20 	lds	r18, 0x2032
    1326:	25 30       	cpi	r18, 0x05	; 5
    1328:	09 f0       	breq	.+2      	; 0x132c <huievent_decoder+0x200>
    132a:	6f c0       	rjmp	.+222    	; 0x140a <huievent_decoder+0x2de>
    132c:	20 91 3f 20 	lds	r18, 0x203F
    1330:	30 91 40 20 	lds	r19, 0x2040
    1334:	82 17       	cp	r24, r18
    1336:	93 07       	cpc	r25, r19
    1338:	08 f0       	brcs	.+2      	; 0x133c <huievent_decoder+0x210>
    133a:	67 c0       	rjmp	.+206    	; 0x140a <huievent_decoder+0x2de>
	{
		//left
		duration=global_time-gesturestart;
    133c:	80 91 30 20 	lds	r24, 0x2030
    1340:	90 91 31 20 	lds	r25, 0x2031
    1344:	20 91 2c 20 	lds	r18, 0x202C
    1348:	30 91 2d 20 	lds	r19, 0x202D
    134c:	82 1b       	sub	r24, r18
    134e:	93 0b       	sbc	r25, r19
    1350:	80 93 2a 20 	sts	0x202A, r24
    1354:	90 93 2b 20 	sts	0x202B, r25
		if (duration < HISPEEDTIME){
    1358:	80 91 2a 20 	lds	r24, 0x202A
    135c:	90 91 2b 20 	lds	r25, 0x202B
    1360:	4e 97       	sbiw	r24, 0x1e	; 30
    1362:	30 f4       	brcc	.+12     	; 0x1370 <huievent_decoder+0x244>
			t_data+=2;
    1364:	80 91 6e 20 	lds	r24, 0x206E
    1368:	8e 5f       	subi	r24, 0xFE	; 254
    136a:	80 93 6e 20 	sts	0x206E, r24
    136e:	05 c0       	rjmp	.+10     	; 0x137a <huievent_decoder+0x24e>
		}
		else{
			t_data+=1;
    1370:	80 91 6e 20 	lds	r24, 0x206E
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 6e 20 	sts	0x206E, r24
		}
		t_data+=LEFT;
    137a:	80 91 6e 20 	lds	r24, 0x206E
    137e:	80 5d       	subi	r24, 0xD0	; 208
    1380:	80 93 6e 20 	sts	0x206E, r24
		t_time=(uint8_t)0xff&global_time;
    1384:	80 91 30 20 	lds	r24, 0x2030
    1388:	90 91 31 20 	lds	r25, 0x2031
    138c:	80 93 69 20 	sts	0x2069, r24
		if (!lock)
    1390:	80 91 53 20 	lds	r24, 0x2053
    1394:	81 11       	cpse	r24, r1
    1396:	39 c0       	rjmp	.+114    	; 0x140a <huievent_decoder+0x2de>
		{
		
			cli();
    1398:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
    139a:	65 ea       	ldi	r22, 0xA5	; 165
    139c:	80 ec       	ldi	r24, 0xC0	; 192
    139e:	99 e0       	ldi	r25, 0x09	; 9
    13a0:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time);
    13a4:	60 91 69 20 	lds	r22, 0x2069
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_data);
    13b0:	60 91 6e 20 	lds	r22, 0x206E
    13b4:	80 ec       	ldi	r24, 0xC0	; 192
    13b6:	99 e0       	ldi	r25, 0x09	; 9
    13b8:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time + t_data + 0xa5);
    13bc:	60 91 69 20 	lds	r22, 0x2069
    13c0:	80 91 6e 20 	lds	r24, 0x206E
    13c4:	68 0f       	add	r22, r24
    13c6:	6b 55       	subi	r22, 0x5B	; 91
    13c8:	80 ec       	ldi	r24, 0xC0	; 192
    13ca:	99 e0       	ldi	r25, 0x09	; 9
    13cc:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			t_data=0;
    13d0:	10 92 6e 20 	sts	0x206E, r1
			state=0;
    13d4:	10 92 32 20 	sts	0x2032, r1
			b8c=0;
    13d8:	10 92 43 20 	sts	0x2043, r1
    13dc:	10 92 44 20 	sts	0x2044, r1
			b9c=0;
    13e0:	10 92 41 20 	sts	0x2041, r1
    13e4:	10 92 42 20 	sts	0x2042, r1
			b10c=0;
    13e8:	10 92 3f 20 	sts	0x203F, r1
    13ec:	10 92 40 20 	sts	0x2040, r1
			b11c=0;
    13f0:	10 92 3d 20 	sts	0x203D, r1
    13f4:	10 92 3e 20 	sts	0x203E, r1
			b12c=0;
    13f8:	10 92 3b 20 	sts	0x203B, r1
    13fc:	10 92 3c 20 	sts	0x203C, r1
			sleep_timer=0;
    1400:	10 92 2e 20 	sts	0x202E, r1
    1404:	10 92 2f 20 	sts	0x202F, r1
			sei();
    1408:	78 94       	sei
		}

	}

	//up
	if ((state==6)&&((b11c>debouncetouch))){
    140a:	80 91 32 20 	lds	r24, 0x2032
    140e:	86 30       	cpi	r24, 0x06	; 6
    1410:	09 f0       	breq	.+2      	; 0x1414 <huievent_decoder+0x2e8>
    1412:	72 c0       	rjmp	.+228    	; 0x14f8 <huievent_decoder+0x3cc>
    1414:	80 91 3d 20 	lds	r24, 0x203D
    1418:	90 91 3e 20 	lds	r25, 0x203E
    141c:	20 91 07 20 	lds	r18, 0x2007
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	08 f0       	brcs	.+2      	; 0x142a <huievent_decoder+0x2fe>
    1428:	67 c0       	rjmp	.+206    	; 0x14f8 <huievent_decoder+0x3cc>
		duration=global_time-gesturestart;
    142a:	80 91 30 20 	lds	r24, 0x2030
    142e:	90 91 31 20 	lds	r25, 0x2031
    1432:	20 91 2c 20 	lds	r18, 0x202C
    1436:	30 91 2d 20 	lds	r19, 0x202D
    143a:	82 1b       	sub	r24, r18
    143c:	93 0b       	sbc	r25, r19
    143e:	80 93 2a 20 	sts	0x202A, r24
    1442:	90 93 2b 20 	sts	0x202B, r25
		if (duration < HISPEEDTIME){
    1446:	80 91 2a 20 	lds	r24, 0x202A
    144a:	90 91 2b 20 	lds	r25, 0x202B
    144e:	4e 97       	sbiw	r24, 0x1e	; 30
    1450:	30 f4       	brcc	.+12     	; 0x145e <huievent_decoder+0x332>
			t_data+=2;
    1452:	80 91 6e 20 	lds	r24, 0x206E
    1456:	8e 5f       	subi	r24, 0xFE	; 254
    1458:	80 93 6e 20 	sts	0x206E, r24
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <huievent_decoder+0x33c>
		}
		else{
			t_data+=1;
    145e:	80 91 6e 20 	lds	r24, 0x206E
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 6e 20 	sts	0x206E, r24
		}
		
		t_data+=UP;
    1468:	80 91 6e 20 	lds	r24, 0x206E
    146c:	80 5f       	subi	r24, 0xF0	; 240
    146e:	80 93 6e 20 	sts	0x206E, r24
		t_time=(uint8_t)0xff&global_time;
    1472:	80 91 30 20 	lds	r24, 0x2030
    1476:	90 91 31 20 	lds	r25, 0x2031
    147a:	80 93 69 20 	sts	0x2069, r24

		if (!lock)
    147e:	80 91 53 20 	lds	r24, 0x2053
    1482:	81 11       	cpse	r24, r1
    1484:	39 c0       	rjmp	.+114    	; 0x14f8 <huievent_decoder+0x3cc>
		{
		
			cli();
    1486:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
    1488:	65 ea       	ldi	r22, 0xA5	; 165
    148a:	80 ec       	ldi	r24, 0xC0	; 192
    148c:	99 e0       	ldi	r25, 0x09	; 9
    148e:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time);
    1492:	60 91 69 20 	lds	r22, 0x2069
    1496:	80 ec       	ldi	r24, 0xC0	; 192
    1498:	99 e0       	ldi	r25, 0x09	; 9
    149a:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_data);
    149e:	60 91 6e 20 	lds	r22, 0x206E
    14a2:	80 ec       	ldi	r24, 0xC0	; 192
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time + t_data + 0xa5);
    14aa:	60 91 69 20 	lds	r22, 0x2069
    14ae:	80 91 6e 20 	lds	r24, 0x206E
    14b2:	68 0f       	add	r22, r24
    14b4:	6b 55       	subi	r22, 0x5B	; 91
    14b6:	80 ec       	ldi	r24, 0xC0	; 192
    14b8:	99 e0       	ldi	r25, 0x09	; 9
    14ba:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			t_data=0;
    14be:	10 92 6e 20 	sts	0x206E, r1
			state=0;
    14c2:	10 92 32 20 	sts	0x2032, r1
			b8c=0;
    14c6:	10 92 43 20 	sts	0x2043, r1
    14ca:	10 92 44 20 	sts	0x2044, r1
			b9c=0;
    14ce:	10 92 41 20 	sts	0x2041, r1
    14d2:	10 92 42 20 	sts	0x2042, r1
			b10c=0;
    14d6:	10 92 3f 20 	sts	0x203F, r1
    14da:	10 92 40 20 	sts	0x2040, r1
			b11c=0;
    14de:	10 92 3d 20 	sts	0x203D, r1
    14e2:	10 92 3e 20 	sts	0x203E, r1
			b12c=0;
    14e6:	10 92 3b 20 	sts	0x203B, r1
    14ea:	10 92 3c 20 	sts	0x203C, r1
			sleep_timer=0;
    14ee:	10 92 2e 20 	sts	0x202E, r1
    14f2:	10 92 2f 20 	sts	0x202F, r1
			sei();
    14f6:	78 94       	sei
		}

	}
	//right
	if ((state==7)&&(b8c>debouncetouch)){
    14f8:	80 91 32 20 	lds	r24, 0x2032
    14fc:	87 30       	cpi	r24, 0x07	; 7
    14fe:	09 f0       	breq	.+2      	; 0x1502 <huievent_decoder+0x3d6>
    1500:	72 c0       	rjmp	.+228    	; 0x15e6 <huievent_decoder+0x4ba>
    1502:	80 91 43 20 	lds	r24, 0x2043
    1506:	90 91 44 20 	lds	r25, 0x2044
    150a:	20 91 07 20 	lds	r18, 0x2007
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	28 17       	cp	r18, r24
    1512:	39 07       	cpc	r19, r25
    1514:	08 f0       	brcs	.+2      	; 0x1518 <huievent_decoder+0x3ec>
    1516:	67 c0       	rjmp	.+206    	; 0x15e6 <huievent_decoder+0x4ba>
		duration=global_time-gesturestart;
    1518:	80 91 30 20 	lds	r24, 0x2030
    151c:	90 91 31 20 	lds	r25, 0x2031
    1520:	20 91 2c 20 	lds	r18, 0x202C
    1524:	30 91 2d 20 	lds	r19, 0x202D
    1528:	82 1b       	sub	r24, r18
    152a:	93 0b       	sbc	r25, r19
    152c:	80 93 2a 20 	sts	0x202A, r24
    1530:	90 93 2b 20 	sts	0x202B, r25
		if (duration < HISPEEDTIME){
    1534:	80 91 2a 20 	lds	r24, 0x202A
    1538:	90 91 2b 20 	lds	r25, 0x202B
    153c:	4e 97       	sbiw	r24, 0x1e	; 30
    153e:	30 f4       	brcc	.+12     	; 0x154c <huievent_decoder+0x420>
			t_data+=2;
    1540:	80 91 6e 20 	lds	r24, 0x206E
    1544:	8e 5f       	subi	r24, 0xFE	; 254
    1546:	80 93 6e 20 	sts	0x206E, r24
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <huievent_decoder+0x42a>
		}
		else{
			t_data+=1;
    154c:	80 91 6e 20 	lds	r24, 0x206E
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	80 93 6e 20 	sts	0x206E, r24
		}

		t_data+=RIGHT;
    1556:	80 91 6e 20 	lds	r24, 0x206E
    155a:	80 5c       	subi	r24, 0xC0	; 192
    155c:	80 93 6e 20 	sts	0x206E, r24
		t_time=(uint8_t)0xff&global_time;
    1560:	80 91 30 20 	lds	r24, 0x2030
    1564:	90 91 31 20 	lds	r25, 0x2031
    1568:	80 93 69 20 	sts	0x2069, r24

		if (!lock)
    156c:	80 91 53 20 	lds	r24, 0x2053
    1570:	81 11       	cpse	r24, r1
    1572:	39 c0       	rjmp	.+114    	; 0x15e6 <huievent_decoder+0x4ba>
		{
			cli();
    1574:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
    1576:	65 ea       	ldi	r22, 0xA5	; 165
    1578:	80 ec       	ldi	r24, 0xC0	; 192
    157a:	99 e0       	ldi	r25, 0x09	; 9
    157c:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time);
    1580:	60 91 69 20 	lds	r22, 0x2069
    1584:	80 ec       	ldi	r24, 0xC0	; 192
    1586:	99 e0       	ldi	r25, 0x09	; 9
    1588:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_data);
    158c:	60 91 6e 20 	lds	r22, 0x206E
    1590:	80 ec       	ldi	r24, 0xC0	; 192
    1592:	99 e0       	ldi	r25, 0x09	; 9
    1594:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time + t_data + 0xa5);
    1598:	60 91 69 20 	lds	r22, 0x2069
    159c:	80 91 6e 20 	lds	r24, 0x206E
    15a0:	68 0f       	add	r22, r24
    15a2:	6b 55       	subi	r22, 0x5B	; 91
    15a4:	80 ec       	ldi	r24, 0xC0	; 192
    15a6:	99 e0       	ldi	r25, 0x09	; 9
    15a8:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			
			t_data=0;
    15ac:	10 92 6e 20 	sts	0x206E, r1
			state=0;
    15b0:	10 92 32 20 	sts	0x2032, r1
			b8c=0;
    15b4:	10 92 43 20 	sts	0x2043, r1
    15b8:	10 92 44 20 	sts	0x2044, r1
			b9c=0;
    15bc:	10 92 41 20 	sts	0x2041, r1
    15c0:	10 92 42 20 	sts	0x2042, r1
			b10c=0;
    15c4:	10 92 3f 20 	sts	0x203F, r1
    15c8:	10 92 40 20 	sts	0x2040, r1
			b11c=0;
    15cc:	10 92 3d 20 	sts	0x203D, r1
    15d0:	10 92 3e 20 	sts	0x203E, r1
			b12c=0;
    15d4:	10 92 3b 20 	sts	0x203B, r1
    15d8:	10 92 3c 20 	sts	0x203C, r1
			sleep_timer=0;
    15dc:	10 92 2e 20 	sts	0x202E, r1
    15e0:	10 92 2f 20 	sts	0x202F, r1
			sei();
    15e4:	78 94       	sei
		}
	}
	//down
	if ((state==8)&&(b9c>debouncetouch)){
    15e6:	80 91 32 20 	lds	r24, 0x2032
    15ea:	88 30       	cpi	r24, 0x08	; 8
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <huievent_decoder+0x4c4>
    15ee:	72 c0       	rjmp	.+228    	; 0x16d4 <huievent_decoder+0x5a8>
    15f0:	80 91 41 20 	lds	r24, 0x2041
    15f4:	90 91 42 20 	lds	r25, 0x2042
    15f8:	20 91 07 20 	lds	r18, 0x2007
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	08 f0       	brcs	.+2      	; 0x1606 <huievent_decoder+0x4da>
    1604:	67 c0       	rjmp	.+206    	; 0x16d4 <huievent_decoder+0x5a8>
		duration=global_time-gesturestart;
    1606:	80 91 30 20 	lds	r24, 0x2030
    160a:	90 91 31 20 	lds	r25, 0x2031
    160e:	20 91 2c 20 	lds	r18, 0x202C
    1612:	30 91 2d 20 	lds	r19, 0x202D
    1616:	82 1b       	sub	r24, r18
    1618:	93 0b       	sbc	r25, r19
    161a:	80 93 2a 20 	sts	0x202A, r24
    161e:	90 93 2b 20 	sts	0x202B, r25
		if (duration < HISPEEDTIME){
    1622:	80 91 2a 20 	lds	r24, 0x202A
    1626:	90 91 2b 20 	lds	r25, 0x202B
    162a:	4e 97       	sbiw	r24, 0x1e	; 30
    162c:	30 f4       	brcc	.+12     	; 0x163a <huievent_decoder+0x50e>
			t_data+=2;
    162e:	80 91 6e 20 	lds	r24, 0x206E
    1632:	8e 5f       	subi	r24, 0xFE	; 254
    1634:	80 93 6e 20 	sts	0x206E, r24
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <huievent_decoder+0x518>
		}
		else{
			t_data+=1;
    163a:	80 91 6e 20 	lds	r24, 0x206E
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	80 93 6e 20 	sts	0x206E, r24
		}
		
		t_data+=DOWN;
    1644:	80 91 6e 20 	lds	r24, 0x206E
    1648:	80 5e       	subi	r24, 0xE0	; 224
    164a:	80 93 6e 20 	sts	0x206E, r24
		

		t_time=(uint8_t)0xff&global_time;
    164e:	80 91 30 20 	lds	r24, 0x2030
    1652:	90 91 31 20 	lds	r25, 0x2031
    1656:	80 93 69 20 	sts	0x2069, r24
		
	if (!lock)
    165a:	80 91 53 20 	lds	r24, 0x2053
    165e:	81 11       	cpse	r24, r1
    1660:	39 c0       	rjmp	.+114    	; 0x16d4 <huievent_decoder+0x5a8>
		{	
		cli();
    1662:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
    1664:	65 ea       	ldi	r22, 0xA5	; 165
    1666:	80 ec       	ldi	r24, 0xC0	; 192
    1668:	99 e0       	ldi	r25, 0x09	; 9
    166a:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time);
    166e:	60 91 69 20 	lds	r22, 0x2069
    1672:	80 ec       	ldi	r24, 0xC0	; 192
    1674:	99 e0       	ldi	r25, 0x09	; 9
    1676:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_data);
    167a:	60 91 6e 20 	lds	r22, 0x206E
    167e:	80 ec       	ldi	r24, 0xC0	; 192
    1680:	99 e0       	ldi	r25, 0x09	; 9
    1682:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,t_time + t_data + 0xa5);
    1686:	60 91 69 20 	lds	r22, 0x2069
    168a:	80 91 6e 20 	lds	r24, 0x206E
    168e:	68 0f       	add	r22, r24
    1690:	6b 55       	subi	r22, 0x5B	; 91
    1692:	80 ec       	ldi	r24, 0xC0	; 192
    1694:	99 e0       	ldi	r25, 0x09	; 9
    1696:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
		
			state=0;
    169a:	10 92 32 20 	sts	0x2032, r1
			t_data=0;
    169e:	10 92 6e 20 	sts	0x206E, r1
			b8c=0;
    16a2:	10 92 43 20 	sts	0x2043, r1
    16a6:	10 92 44 20 	sts	0x2044, r1
			b9c=0;
    16aa:	10 92 41 20 	sts	0x2041, r1
    16ae:	10 92 42 20 	sts	0x2042, r1
			b10c=0;
    16b2:	10 92 3f 20 	sts	0x203F, r1
    16b6:	10 92 40 20 	sts	0x2040, r1
			b11c=0;
    16ba:	10 92 3d 20 	sts	0x203D, r1
    16be:	10 92 3e 20 	sts	0x203E, r1
			b12c=0;
    16c2:	10 92 3b 20 	sts	0x203B, r1
    16c6:	10 92 3c 20 	sts	0x203C, r1
			sleep_timer=0;
    16ca:	10 92 2e 20 	sts	0x202E, r1
    16ce:	10 92 2f 20 	sts	0x202F, r1
			sei();
    16d2:	78 94       	sei
    16d4:	08 95       	ret

000016d6 <init_interrupts>:

///function initialize wake up interrupts
//todo: test wake up
void init_interrupts(){
	//enable wake up function on pin change
	PORTA.INTMASK = PIN2_bm;
    16d6:	e0 e0       	ldi	r30, 0x00	; 0
    16d8:	f6 e0       	ldi	r31, 0x06	; 6
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	82 87       	std	Z+10, r24	; 0x0a
	PORTA.INTCTRL = PORT_INTLVL_HI_gc;
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	91 87       	std	Z+9, r25	; 0x09
	PORTA.DIRCLR = PIN2_bm;
    16e2:	82 83       	std	Z+2, r24	; 0x02
	PORTC.INTMASK = PIN2_bm;
    16e4:	e0 e4       	ldi	r30, 0x40	; 64
    16e6:	f6 e0       	ldi	r31, 0x06	; 6
    16e8:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = PORT_INTLVL_HI_gc;
    16ea:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRCLR = PIN2_bm;
    16ec:	82 83       	std	Z+2, r24	; 0x02
	
	PMIC.CTRL = PMIC_HILVLEN_bm; // enable hi level interrupts
    16ee:	e0 ea       	ldi	r30, 0xA0	; 160
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	82 83       	std	Z+2, r24	; 0x02
	sei(); // enable interrupts
    16f4:	78 94       	sei

	//
	////Enable rx interrupt level
	USARTD0_CTRLA = (USARTD0_CTRLA &= ~ USART_RXCINTLVL_gm) | USART_RXCINTLVL_HI_gc;
    16f6:	e2 ec       	ldi	r30, 0xC2	; 194
    16f8:	f9 e0       	ldi	r31, 0x09	; 9
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7c       	andi	r24, 0xCF	; 207
    16fe:	80 83       	st	Z, r24
    1700:	80 63       	ori	r24, 0x30	; 48
    1702:	80 83       	st	Z, r24
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1704:	e0 ea       	ldi	r30, 0xA0	; 160
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	87 e0       	ldi	r24, 0x07	; 7
    170a:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	82 83       	std	Z+2, r24	; 0x02
	//

	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	cpu_irq_enable();
    1712:	78 94       	sei
    1714:	08 95       	ret

00001716 <init>:
* The board-specific conf_board.h file contains the configuration of
* the board initialization this is mainly cecouse of internal settings.
*   init function initializes xmega mcu with
*   ports, interrupts, system clock, uart...
************************************************************************/
void init(){
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
	b1=b2=b3=b4=b5=b6=b7=SERVED_RELEASED;
    171a:	10 92 67 20 	sts	0x2067, r1
    171e:	10 92 6d 20 	sts	0x206D, r1
    1722:	10 92 6b 20 	sts	0x206B, r1
    1726:	10 92 65 20 	sts	0x2065, r1
    172a:	10 92 6c 20 	sts	0x206C, r1
    172e:	10 92 5a 20 	sts	0x205A, r1
    1732:	10 92 5d 20 	sts	0x205D, r1
	state=0;
    1736:	10 92 32 20 	sts	0x2032, r1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    173a:	e0 e0       	ldi	r30, 0x00	; 0
    173c:	f6 e0       	ldi	r31, 0x06	; 6
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	92 83       	std	Z+2, r25	; 0x02
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	82 83       	std	Z+2, r24	; 0x02
    1746:	28 e0       	ldi	r18, 0x08	; 8
    1748:	22 83       	std	Z+2, r18	; 0x02
    174a:	20 e2       	ldi	r18, 0x20	; 32
    174c:	22 83       	std	Z+2, r18	; 0x02
    174e:	c0 e6       	ldi	r28, 0x60	; 96
    1750:	d6 e0       	ldi	r29, 0x06	; 6
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	a0 e4       	ldi	r26, 0x40	; 64
    1756:	b6 e0       	ldi	r27, 0x06	; 6
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	8c 93       	st	X, r24
    175c:	12 97       	sbiw	r26, 0x02	; 2
    175e:	2a 83       	std	Y+2, r18	; 0x02
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	82 83       	std	Z+2, r24	; 0x02
    1764:	80 e4       	ldi	r24, 0x40	; 64
    1766:	82 83       	std	Z+2, r24	; 0x02
    1768:	12 96       	adiw	r26, 0x02	; 2
    176a:	9c 93       	st	X, r25
    176c:	12 97       	sbiw	r26, 0x02	; 2
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	82 83       	std	Z+2, r24	; 0x02
    1774:	12 96       	adiw	r26, 0x02	; 2
    1776:	8c 93       	st	X, r24
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	56 e0       	ldi	r21, 0x06	; 6
    177c:	64 e0       	ldi	r22, 0x04	; 4
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	96 e0       	ldi	r25, 0x06	; 6
    1782:	0e 94 53 02 	call	0x4a6	; 0x4a6 <ioport_configure_port_pin>
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	56 e0       	ldi	r21, 0x06	; 6
    178a:	64 e0       	ldi	r22, 0x04	; 4
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	96 e0       	ldi	r25, 0x06	; 6
    1790:	0e 94 53 02 	call	0x4a6	; 0x4a6 <ioport_configure_port_pin>
    1794:	43 e0       	ldi	r20, 0x03	; 3
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	68 e0       	ldi	r22, 0x08	; 8
    179a:	80 e6       	ldi	r24, 0x60	; 96
    179c:	96 e0       	ldi	r25, 0x06	; 6
    179e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <ioport_configure_port_pin>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	56 e0       	ldi	r21, 0x06	; 6
    17a6:	64 e0       	ldi	r22, 0x04	; 4
    17a8:	80 e6       	ldi	r24, 0x60	; 96
    17aa:	96 e0       	ldi	r25, 0x06	; 6
    17ac:	0e 94 53 02 	call	0x4a6	; 0x4a6 <ioport_configure_port_pin>
	ioport_configure_pin(TX, IOPORT_DIR_OUTPUT	| IOPORT_INIT_HIGH);
	ioport_configure_pin(RX, IOPORT_DIR_INPUT	| IOPORT_FORCE_ENABLE);


	//clock settings
	sysclk_init();
    17b0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <sysclk_init>
	*/



	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e2       	ldi	r23, 0x20	; 32
    17b8:	80 ec       	ldi	r24, 0xC0	; 192
    17ba:	99 e0       	ldi	r25, 0x09	; 9
    17bc:	0e 94 86 01 	call	0x30c	; 0x30c <usart_init_rs232>

	//configure interrupt for debouncer
	tc45_enable(&TCC4);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	98 e0       	ldi	r25, 0x08	; 8
    17c4:	f2 d8       	rcall	.-3612   	; 0x9aa <tc45_enable>
	tc45_set_overflow_interrupt_callback(&TCC4, my_callback);
    17c6:	6a e3       	ldi	r22, 0x3A	; 58
    17c8:	77 e0       	ldi	r23, 0x07	; 7
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	98 e0       	ldi	r25, 0x08	; 8
    17ce:	1f d9       	rcall	.-3522   	; 0xa0e <tc45_set_overflow_interrupt_callback>
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    17d0:	e0 e0       	ldi	r30, 0x00	; 0
    17d2:	f8 e0       	ldi	r31, 0x08	; 8
    17d4:	81 81       	ldd	r24, Z+1	; 0x01
    17d6:	88 7f       	andi	r24, 0xF8	; 248
    17d8:	81 83       	std	Z+1, r24	; 0x01
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    17da:	8a e0       	ldi	r24, 0x0A	; 10
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	86 a3       	std	Z+38, r24	; 0x26
    17e0:	97 a3       	std	Z+39, r25	; 0x27
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    17e2:	86 81       	ldd	r24, Z+6	; 0x06
    17e4:	8c 7f       	andi	r24, 0xFC	; 252
    17e6:	86 83       	std	Z+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    17e8:	86 81       	ldd	r24, Z+6	; 0x06
    17ea:	81 60       	ori	r24, 0x01	; 1
    17ec:	86 83       	std	Z+6, r24	; 0x06
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	tc45_write_period(&TCC4, DEBOUNCETIMER);
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	irq_initialize_vectors();
    17ee:	87 e0       	ldi	r24, 0x07	; 7
    17f0:	e0 ea       	ldi	r30, 0xA0	; 160
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    17f6:	78 94       	sei
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    17f8:	e0 e0       	ldi	r30, 0x00	; 0
    17fa:	f8 e0       	ldi	r31, 0x08	; 8
    17fc:	80 81       	ld	r24, Z
    17fe:	80 7f       	andi	r24, 0xF0	; 240
    1800:	87 60       	ori	r24, 0x07	; 7
    1802:	80 83       	st	Z, r24
	tc45_write_clock_source(&TCC4, TC45_CLKSEL_DIV1024_gc);
	
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_250CLK);
    1804:	85 e0       	ldi	r24, 0x05	; 5
    1806:	0e 94 2b 02 	call	0x456	; 0x456 <wdt_set_timeout_period>
	wdt_enable();
    180a:	0e 94 46 02 	call	0x48c	; 0x48c <wdt_enable>
	
	init_interrupts();
    180e:	63 df       	rcall	.-314    	; 0x16d6 <init_interrupts>

	
	lock=0;
    1810:	10 92 53 20 	sts	0x2053, r1

}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <main>:
/*! \brief Main function.
*/
int main(void)
{
	init();
    181a:	7d df       	rcall	.-262    	; 0x1716 <init>
	while (true) {
		//	t_time++;
		//	b_time++;
		
		if (b13c>555)//we should go to sleep on demand of user
    181c:	80 91 37 20 	lds	r24, 0x2037
    1820:	90 91 38 20 	lds	r25, 0x2038
    1824:	a0 91 39 20 	lds	r26, 0x2039
    1828:	b0 91 3a 20 	lds	r27, 0x203A
    182c:	8c 32       	cpi	r24, 0x2C	; 44
    182e:	92 40       	sbci	r25, 0x02	; 2
    1830:	a1 05       	cpc	r26, r1
    1832:	b1 05       	cpc	r27, r1
    1834:	c8 f0       	brcs	.+50     	; 0x1868 <main+0x4e>
		{//off message
			wdt_disable();
    1836:	0e 94 3e 02 	call	0x47c	; 0x47c <wdt_disable>
			cli();
    183a:	f8 94       	cli
			usart_putchar(USART_SERIAL_EXAMPLE,0xa5);
    183c:	65 ea       	ldi	r22, 0xA5	; 165
    183e:	80 ec       	ldi	r24, 0xC0	; 192
    1840:	99 e0       	ldi	r25, 0x09	; 9
    1842:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,0x4);
    1846:	64 e0       	ldi	r22, 0x04	; 4
    1848:	80 ec       	ldi	r24, 0xC0	; 192
    184a:	99 e0       	ldi	r25, 0x09	; 9
    184c:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,SHUTDOWNMSG);
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	80 ec       	ldi	r24, 0xC0	; 192
    1854:	99 e0       	ldi	r25, 0x09	; 9
    1856:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			usart_putchar(USART_SERIAL_EXAMPLE,0x4 + SHUTDOWNMSG + 0xa5);
    185a:	6d ea       	ldi	r22, 0xAD	; 173
    185c:	80 ec       	ldi	r24, 0xC0	; 192
    185e:	99 e0       	ldi	r25, 0x09	; 9
    1860:	0e 94 74 00 	call	0xe8	; 0xe8 <usart_putchar>
			sei();
    1864:	78 94       	sei
    1866:	ff cf       	rjmp	.-2      	; 0x1866 <main+0x4c>
		//incactive to long go to sleep(lock)
		
		//if(sleep_timer>((BUTTONDEBOUNCERREPETITION-BUTTONDEBOUNCERREPETITIONRESETLONG)*5)*SLEEPTIME)
		if(sleep_timer>=(185*SLEEPTIME))
		{
			lock=1;
    1868:	c1 e0       	ldi	r28, 0x01	; 1
			usart_putchar(USART_SERIAL_EXAMPLE,0x4 + SHUTDOWNMSG + 0xa5);
			sei();
			//				sleep();
			while(1);
		}
		wdt_reset();
    186a:	a8 95       	wdr
					//lock=1;
				//}*/
		//}
	//	wdt_reset();
		
		buttons_dispatcher();
    186c:	2e dc       	rcall	.-1956   	; 0x10ca <buttons_dispatcher>
		wdt_reset();
    186e:	a8 95       	wdr
		huievent_decoder();
    1870:	5d dc       	rcall	.-1862   	; 0x112c <huievent_decoder>
		wdt_reset();
    1872:	a8 95       	wdr
		
		
		//incactive to long go to sleep(lock)
		
		//if(sleep_timer>((BUTTONDEBOUNCERREPETITION-BUTTONDEBOUNCERREPETITIONRESETLONG)*5)*SLEEPTIME)
		if(sleep_timer>=(185*SLEEPTIME))
    1874:	80 91 2e 20 	lds	r24, 0x202E
    1878:	90 91 2f 20 	lds	r25, 0x202F
    187c:	8c 35       	cpi	r24, 0x5C	; 92
    187e:	9b 42       	sbci	r25, 0x2B	; 43
    1880:	28 f0       	brcs	.+10     	; 0x188c <main+0x72>
		{
			lock=1;
    1882:	c0 93 53 20 	sts	0x2053, r28
			sleep();
    1886:	e3 d8       	rcall	.-3642   	; 0xa4e <sleep>
			lock=0;
    1888:	10 92 53 20 	sts	0x2053, r1
		}
		wdt_reset();
    188c:	a8 95       	wdr
	init();
	while (true) {
		//	t_time++;
		//	b_time++;
		
		if (b13c>555)//we should go to sleep on demand of user
    188e:	80 91 37 20 	lds	r24, 0x2037
    1892:	90 91 38 20 	lds	r25, 0x2038
    1896:	a0 91 39 20 	lds	r26, 0x2039
    189a:	b0 91 3a 20 	lds	r27, 0x203A
    189e:	8c 32       	cpi	r24, 0x2C	; 44
    18a0:	92 40       	sbci	r25, 0x02	; 2
    18a2:	a1 05       	cpc	r26, r1
    18a4:	b1 05       	cpc	r27, r1
    18a6:	08 f3       	brcs	.-62     	; 0x186a <main+0x50>
    18a8:	c6 cf       	rjmp	.-116    	; 0x1836 <main+0x1c>

000018aa <__vector_30>:
		wdt_reset();
	}
}

ISR(PORTA_INT_vect)
{
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	0f 92       	push	r0
    18b2:	11 24       	eor	r1, r1
    18b4:	8f 93       	push	r24
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
	}
		else
	{
		lock=1;
	}*/
	PORTA.INTFLAGS |= PORT_INT2IF_bm;
    18ba:	e0 e0       	ldi	r30, 0x00	; 0
    18bc:	f6 e0       	ldi	r31, 0x06	; 6
    18be:	84 85       	ldd	r24, Z+12	; 0x0c
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	84 87       	std	Z+12, r24	; 0x0c
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	8f 91       	pop	r24
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0
    18d0:	1f 90       	pop	r1
    18d2:	18 95       	reti

000018d4 <__vector_9>:
ISR(PORTC_INT_vect)
{
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	8f 93       	push	r24
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
	if (lock)
    18e4:	80 91 53 20 	lds	r24, 0x2053
    18e8:	81 11       	cpse	r24, r1
	{
		lock=0;
    18ea:	10 92 53 20 	sts	0x2053, r1
	}
/*	else
	{
		lock=1;
	}*/
	PORTC.INTFLAGS |= PORT_INT2IF_bm;
    18ee:	e0 e4       	ldi	r30, 0x40	; 64
    18f0:	f6 e0       	ldi	r31, 0x06	; 6
    18f2:	84 85       	ldd	r24, Z+12	; 0x0c
    18f4:	84 60       	ori	r24, 0x04	; 4
    18f6:	84 87       	std	Z+12, r24	; 0x0c

}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	8f 91       	pop	r24
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <__udivmodsi4>:
    1908:	a1 e2       	ldi	r26, 0x21	; 33
    190a:	1a 2e       	mov	r1, r26
    190c:	aa 1b       	sub	r26, r26
    190e:	bb 1b       	sub	r27, r27
    1910:	fd 01       	movw	r30, r26
    1912:	0d c0       	rjmp	.+26     	; 0x192e <__udivmodsi4_ep>

00001914 <__udivmodsi4_loop>:
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	ee 1f       	adc	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	a2 17       	cp	r26, r18
    191e:	b3 07       	cpc	r27, r19
    1920:	e4 07       	cpc	r30, r20
    1922:	f5 07       	cpc	r31, r21
    1924:	20 f0       	brcs	.+8      	; 0x192e <__udivmodsi4_ep>
    1926:	a2 1b       	sub	r26, r18
    1928:	b3 0b       	sbc	r27, r19
    192a:	e4 0b       	sbc	r30, r20
    192c:	f5 0b       	sbc	r31, r21

0000192e <__udivmodsi4_ep>:
    192e:	66 1f       	adc	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	1a 94       	dec	r1
    1938:	69 f7       	brne	.-38     	; 0x1914 <__udivmodsi4_loop>
    193a:	60 95       	com	r22
    193c:	70 95       	com	r23
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	9b 01       	movw	r18, r22
    1944:	ac 01       	movw	r20, r24
    1946:	bd 01       	movw	r22, r26
    1948:	cf 01       	movw	r24, r30
    194a:	08 95       	ret

0000194c <_exit>:
    194c:	f8 94       	cli

0000194e <__stop_program>:
    194e:	ff cf       	rjmp	.-2      	; 0x194e <__stop_program>
