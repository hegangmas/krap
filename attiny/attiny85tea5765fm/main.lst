   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 103               	.global	setFrequency
 105               	setFrequency:
 106               		.stabd	46,0,0
   1:main.c        **** #ifndef F_CPU
   2:main.c        **** #define F_CPU 8000000UL
   3:main.c        **** #endif
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include <avr/io.h>
   6:main.c        **** 
   7:main.c        **** #include <inttypes.h>
   8:main.c        **** #include <avr/interrupt.h>
   9:main.c        **** #include "USI_TWI_Master.h"
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** 
  13:main.c        **** /* define CPU frequency in Mhz here if not defined in Makefile */
  14:main.c        **** #ifndef F_CPU
  15:main.c        **** #define F_CPU 8000000UL
  16:main.c        **** #endif
  17:main.c        **** 
  18:main.c        **** 
  19:main.c        **** #define _BV(bit) (1 << (bit))
  20:main.c        **** 
  21:main.c        **** #define SETBIT(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
  22:main.c        **** #define CLEARBIT(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
  23:main.c        **** #define FLIPBIT(ADDRESS,BIT) (ADDRESS ^= (1<<BIT))
  24:main.c        **** #define CHECKBIT(ADDRESS,BIT) (ADDRESS & (1<<BIT))
  25:main.c        **** 
  26:main.c        **** #define SETBITMASK(x,y) (x |= (y))
  27:main.c        **** #define CLEARBITMASK(x,y) (x &= (~y))
  28:main.c        **** #define FLIPBITMASK(x,y) (x ^= (y))
  29:main.c        **** #define CHECKBITMASK(x,y) (x & (y))
  30:main.c        **** 
  31:main.c        **** #define VARFROMCOMB(x, y) x
  32:main.c        **** #define BITFROMCOMB(x, y) y
  33:main.c        **** /*use this ones*/
  34:main.c        **** #define C_SETBIT(comb) SETBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  35:main.c        **** #define C_CLEARBIT(comb) CLEARBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  36:main.c        **** #define C_FLIPBIT(comb) FLIPBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  37:main.c        **** #define C_CHECKBIT(comb) CHECKBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  38:main.c        **** /*use this ones*/
  39:main.c        **** #define MIN(A,B)  (((A)<(B)) ? (A) : (B) )
  40:main.c        **** #define MAX(A,B)  (((A)>(B)) ? (A) : (B) )
  41:main.c        **** #define PUT_IN_RANGE(V,VMIN,VMAX) MAX(VMIN,MIN(VMAX,V))
  42:main.c        **** #define MAP_TO_RANGE(V,VMIN0,VMAX0,VMIN1,VMAX1) ( (VMIN1) +  ( (V) – (VMIN0) ) * ( (VMAX1) – (V
  43:main.c        **** 
  44:main.c        **** #define button_frequency_down PORTB,0x3
  45:main.c        **** #define button_frequency_up PORTB,0x4
  46:main.c        **** #define direction_down DDRB,0x3
  47:main.c        **** #define direction_up DDRB,0x4
  48:main.c        **** 
  49:main.c        **** #define TEA5767  0x60                    // device address of tea5767 => 0b1100000
  50:main.c        **** int frequency = 8890;                  //starting frequency
  51:main.c        **** void setFrequency(void);
  52:main.c        **** /* I2C clock in Hz */
  53:main.c        **** 
  54:main.c        **** #define MESSAGEBUF_SIZE       6
  55:main.c        **** unsigned char messageBuf[MESSAGEBUF_SIZE];
  56:main.c        **** 
  57:main.c        **** void setFrequency(){
 108               	.LM0:
 109               	.LFBB1:
 110 0000 8F92      		push r8
 111 0002 9F92      		push r9
 112 0004 AF92      		push r10
 113 0006 BF92      		push r11
 114 0008 CF92      		push r12
 115 000a DF92      		push r13
 116 000c EF92      		push r14
 117 000e FF92      		push r15
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 8 */
 121               	.L__stack_usage = 8
  58:main.c        **** 
  59:main.c        **** 	messageBuf[0]=TEA5767;
 123               	.LM1:
 124 0010 80E6      		ldi r24,lo8(96)
 125 0012 8093 0000 		sts messageBuf,r24
  60:main.c        **** 	messageBuf[1]=(4 * (frequency * 10000 + 225000) / 32768)>>8;
 127               	.LM2:
 128 0016 6091 0000 		lds r22,frequency
 129 001a 7091 0000 		lds r23,frequency+1
 130 001e 8827      		clr r24
 131 0020 77FD      		sbrc r23,7
 132 0022 8095      		com r24
 133 0024 982F      		mov r25,r24
 134 0026 20E4      		ldi r18,lo8(64)
 135 0028 3CE9      		ldi r19,lo8(-100)
 136 002a 40E0      		ldi r20,0
 137 002c 50E0      		ldi r21,0
 138 002e 00D0      		rcall __mulsidi3
 139 0030 4901      		movw r8,r18
 140 0032 5A01      		movw r10,r20
 141 0034 C501      		movw r24,r10
 142 0036 B401      		movw r22,r8
 143 0038 6056      		subi r22,96
 144 003a 7444      		sbci r23,68
 145 003c 824F      		sbci r24,-14
 146 003e 9F4F      		sbci r25,-1
 147 0040 20E0      		ldi r18,0
 148 0042 30E8      		ldi r19,lo8(-128)
 149 0044 40E0      		ldi r20,0
 150 0046 50E0      		ldi r21,0
 151 0048 00D0      		rcall __divmodsi4
 152 004a 3093 0000 		sts messageBuf+1,r19
  61:main.c        **** 	messageBuf[2]=(4 * (frequency * 10000 + 225000) / 32768)&0XFF;
 154               	.LM3:
 155 004e 2093 0000 		sts messageBuf+2,r18
  62:main.c        **** 	messageBuf[3]=0xB0;
 157               	.LM4:
 158 0052 80EB      		ldi r24,lo8(-80)
 159 0054 8093 0000 		sts messageBuf+3,r24
  63:main.c        **** 	messageBuf[4]=0x10;
 161               	.LM5:
 162 0058 80E1      		ldi r24,lo8(16)
 163 005a 8093 0000 		sts messageBuf+4,r24
  64:main.c        **** 	messageBuf[5]=0x00;
 165               	.LM6:
 166 005e 1092 0000 		sts messageBuf+5,__zero_reg__
  65:main.c        **** 	
  66:main.c        **** 	USI_TWI_Master_Initialise();
 168               	.LM7:
 169 0062 00D0      		rcall USI_TWI_Master_Initialise
  67:main.c        **** 
  68:main.c        **** 	USI_TWI_Start_Transceiver_With_Data(messageBuf,(unsigned char)MESSAGEBUF_SIZE);
 171               	.LM8:
 172 0064 66E0      		ldi r22,lo8(6)
 173 0066 80E0      		ldi r24,lo8(messageBuf)
 174 0068 90E0      		ldi r25,hi8(messageBuf)
 175               	/* epilogue start */
  69:main.c        **** 		
  70:main.c        **** }
 177               	.LM9:
 178 006a FF90      		pop r15
 179 006c EF90      		pop r14
 180 006e DF90      		pop r13
 181 0070 CF90      		pop r12
 182 0072 BF90      		pop r11
 183 0074 AF90      		pop r10
 184 0076 9F90      		pop r9
 185 0078 8F90      		pop r8
  68:main.c        **** 		
 187               	.LM10:
 188 007a 00C0      		rjmp USI_TWI_Start_Transceiver_With_Data
 190               	.Lscope1:
 192               		.stabd	78,0,0
 193               		.section	.text.startup,"ax",@progbits
 195               	.global	main
 197               	main:
 198               		.stabd	46,0,0
  71:main.c        **** 
  72:main.c        **** short up=0;
  73:main.c        **** short down=0;
  74:main.c        **** 
  75:main.c        **** int main(void) {
 200               	.LM11:
 201               	.LFBB2:
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
  76:main.c        ****   
  77:main.c        ****   C_CLEARBIT(direction_down);
 207               	.LM12:
 208 0000 BB98      		cbi 0x17,3
  78:main.c        ****   C_CLEARBIT(direction_up);
 210               	.LM13:
 211 0002 BC98      		cbi 0x17,4
  79:main.c        ****   
  80:main.c        ****   for(;;){
  81:main.c        **** 	  
  82:main.c        **** 	if(!(PORTB & (1<<3))&&down==0){
  83:main.c        ****     down=1;
 213               	.LM14:
 214 0004 C1E0      		ldi r28,lo8(1)
 215 0006 D0E0      		ldi r29,0
 216               	.L11:
  82:main.c        ****     down=1;
 218               	.LM15:
 219 0008 C399      		sbic 0x18,3
 220 000a 00C0      		rjmp .L3
  82:main.c        ****     down=1;
 222               	.LM16:
 223 000c 8091 0000 		lds r24,down
 224 0010 9091 0000 		lds r25,down+1
 225 0014 892B      		or r24,r25
 226 0016 01F4      		brne .L3
 228               	.LM17:
 229 0018 D093 0000 		sts down+1,r29
 230 001c C093 0000 		sts down,r28
 231               	.L3:
  84:main.c        **** 	}
  85:main.c        **** 	if(!(PORTB & (1<<3))&&down==1){
 233               	.LM18:
 234 0020 C399      		sbic 0x18,3
 235 0022 00C0      		rjmp .L5
 237               	.LM19:
 238 0024 8091 0000 		lds r24,down
 239 0028 9091 0000 		lds r25,down+1
 240 002c 0197      		sbiw r24,1
 241 002e 01F4      		brne .L5
  86:main.c        **** 		down=0;
 243               	.LM20:
 244 0030 1092 0000 		sts down+1,__zero_reg__
 245 0034 1092 0000 		sts down,__zero_reg__
  87:main.c        **** 		if(frequency>8750)
 247               	.LM21:
 248 0038 8091 0000 		lds r24,frequency
 249 003c 9091 0000 		lds r25,frequency+1
 250 0040 8F32      		cpi r24,47
 251 0042 22E2      		ldi r18,34
 252 0044 9207      		cpc r25,r18
 253 0046 04F0      		brlt .L5
  88:main.c        **** 		{
  89:main.c        **** 			frequency=frequency-10;
 255               	.LM22:
 256 0048 0A97      		sbiw r24,10
 257 004a 9093 0000 		sts frequency+1,r25
 258 004e 8093 0000 		sts frequency,r24
  90:main.c        **** 			setFrequency();
 260               	.LM23:
 261 0052 00D0      		rcall setFrequency
 262               	.L5:
  91:main.c        **** 		}
  92:main.c        ****     }
  93:main.c        ****     
  94:main.c        ****     if(!(PORTB & (1<<4))&&up==0){
 264               	.LM24:
 265 0054 C499      		sbic 0x18,4
 266 0056 00C0      		rjmp .L7
 268               	.LM25:
 269 0058 8091 0000 		lds r24,up
 270 005c 9091 0000 		lds r25,up+1
 271 0060 892B      		or r24,r25
 272 0062 01F4      		brne .L7
  95:main.c        **** 		up=1;
 274               	.LM26:
 275 0064 D093 0000 		sts up+1,r29
 276 0068 C093 0000 		sts up,r28
 277               	.L7:
  96:main.c        **** 	}
  97:main.c        **** 	if(!(PORTB & (1<<4))&&up==1){
 279               	.LM27:
 280 006c C499      		sbic 0x18,4
 281 006e 00C0      		rjmp .L9
 283               	.LM28:
 284 0070 8091 0000 		lds r24,up
 285 0074 9091 0000 		lds r25,up+1
 286 0078 0197      		sbiw r24,1
 287 007a 01F4      		brne .L9
  98:main.c        **** 		up=0;
 289               	.LM29:
 290 007c 1092 0000 		sts up+1,__zero_reg__
 291 0080 1092 0000 		sts up,__zero_reg__
  99:main.c        **** 		if(frequency<10800){
 293               	.LM30:
 294 0084 8091 0000 		lds r24,frequency
 295 0088 9091 0000 		lds r25,frequency+1
 296 008c 8033      		cpi r24,48
 297 008e 2AE2      		ldi r18,42
 298 0090 9207      		cpc r25,r18
 299 0092 04F4      		brge .L9
 100:main.c        **** 			frequency=frequency+10;
 301               	.LM31:
 302 0094 0A96      		adiw r24,10
 303 0096 9093 0000 		sts frequency+1,r25
 304 009a 8093 0000 		sts frequency,r24
 101:main.c        **** 			setFrequency();
 306               	.LM32:
 307 009e 00D0      		rcall setFrequency
 308               	.L9:
 309               	.LBB4:
 310               	.LBB5:
 312               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 314               	.LM33:
 315 00a0 8FE7      		ldi r24,lo8(399999)
 316 00a2 9AE1      		ldi r25,hi8(399999)
 317 00a4 26E0      		ldi r18,hlo8(399999)
 318 00a6 8150      		1: subi r24,1
 319 00a8 9040      		sbci r25,0
 320 00aa 2040      		sbci r18,0
 321 00ac 01F4      		brne 1b
 322 00ae 00C0      		rjmp .
 323 00b0 0000      		nop
 324 00b2 00C0      		rjmp .L11
 325               	.LBE5:
 326               	.LBE4:
 328               	.Lscope2:
 330               		.stabd	78,0,0
 331               	.global	down
 332               		.section .bss
 335               	down:
 336 0000 0000      		.zero	2
 337               	.global	up
 340               	up:
 341 0002 0000      		.zero	2
 342               		.comm	messageBuf,6,1
 343               	.global	frequency
 344               		.data
 347               	frequency:
 348 0000 BA22      		.word	8890
 353               		.text
 355               	.Letext0:
 356               		.ident	"GCC: (GNU) 4.8.1"
 357               	.global __do_copy_data
 358               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccuKlRT1.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccuKlRT1.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccuKlRT1.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccuKlRT1.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccuKlRT1.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccuKlRT1.s:105    .text:0000000000000000 setFrequency
                            *COM*:0000000000000006 messageBuf
     /tmp/ccuKlRT1.s:347    .data:0000000000000000 frequency
     /tmp/ccuKlRT1.s:197    .text.startup:0000000000000000 main
     /tmp/ccuKlRT1.s:335    .bss:0000000000000000 down
     /tmp/ccuKlRT1.s:340    .bss:0000000000000002 up

UNDEFINED SYMBOLS
__mulsidi3
__divmodsi4
USI_TWI_Master_Initialise
USI_TWI_Start_Transceiver_With_Data
__do_copy_data
__do_clear_bss
