
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  000004a6  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de4  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e1       	ldi	r30, 0x10	; 16
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 36       	cpi	r26, 0x6D	; 109
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c3 d0       	rcall	.+390    	; 0x1d8 <main>
  52:	dc c1       	rjmp	.+952    	; 0x40c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setFrequency>:
/* I2C clock in Hz */

#define MESSAGEBUF_SIZE       6
unsigned char messageBuf[MESSAGEBUF_SIZE];

void setFrequency(){
  56:	8f 92       	push	r8
  58:	9f 92       	push	r9
  5a:	af 92       	push	r10
  5c:	bf 92       	push	r11
  5e:	cf 92       	push	r12
  60:	df 92       	push	r13
  62:	ef 92       	push	r14
  64:	ff 92       	push	r15

	messageBuf[0]=TEA5767;
  66:	80 e6       	ldi	r24, 0x60	; 96
  68:	80 93 66 00 	sts	0x0066, r24
	messageBuf[1]=(4 * (frequency * 10000 + 225000) / 32768)>>8;
  6c:	60 91 60 00 	lds	r22, 0x0060
  70:	70 91 61 00 	lds	r23, 0x0061
  74:	88 27       	eor	r24, r24
  76:	77 fd       	sbrc	r23, 7
  78:	80 95       	com	r24
  7a:	98 2f       	mov	r25, r24
  7c:	20 e4       	ldi	r18, 0x40	; 64
  7e:	3c e9       	ldi	r19, 0x9C	; 156
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	1f d1       	rcall	.+574    	; 0x2c4 <__mulsidi3>
  86:	49 01       	movw	r8, r18
  88:	5a 01       	movw	r10, r20
  8a:	c5 01       	movw	r24, r10
  8c:	b4 01       	movw	r22, r8
  8e:	60 56       	subi	r22, 0x60	; 96
  90:	74 44       	sbci	r23, 0x44	; 68
  92:	82 4f       	sbci	r24, 0xF2	; 242
  94:	9f 4f       	sbci	r25, 0xFF	; 255
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e8       	ldi	r19, 0x80	; 128
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	f6 d0       	rcall	.+492    	; 0x28c <__divmodsi4>
  a0:	30 93 67 00 	sts	0x0067, r19
	messageBuf[2]=(4 * (frequency * 10000 + 225000) / 32768)&0XFF;
  a4:	20 93 68 00 	sts	0x0068, r18
	messageBuf[3]=0xB0;
  a8:	80 eb       	ldi	r24, 0xB0	; 176
  aa:	80 93 69 00 	sts	0x0069, r24
	messageBuf[4]=0x10;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	80 93 6a 00 	sts	0x006A, r24
	messageBuf[5]=0x00;
  b4:	10 92 6b 00 	sts	0x006B, r1
	
	USI_TWI_Master_Initialise();
  b8:	0c d0       	rcall	.+24     	; 0xd2 <USI_TWI_Master_Initialise>

	USI_TWI_Start_Transceiver_With_Data(messageBuf,(unsigned char)MESSAGEBUF_SIZE);
  ba:	66 e0       	ldi	r22, 0x06	; 6
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	90 e0       	ldi	r25, 0x00	; 0
		
}
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	df 90       	pop	r13
  c6:	cf 90       	pop	r12
  c8:	bf 90       	pop	r11
  ca:	af 90       	pop	r10
  cc:	9f 90       	pop	r9
  ce:	8f 90       	pop	r8
	messageBuf[4]=0x10;
	messageBuf[5]=0x00;
	
	USI_TWI_Master_Initialise();

	USI_TWI_Start_Transceiver_With_Data(messageBuf,(unsigned char)MESSAGEBUF_SIZE);
  d0:	2f c0       	rjmp	.+94     	; 0x130 <USI_TWI_Start_Transceiver_With_Data>

000000d2 <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
  PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
  d2:	c0 9a       	sbi	0x18, 0	; 24
  PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
  d4:	c2 9a       	sbi	0x18, 2	; 24
  
  DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
  d6:	ba 9a       	sbi	0x17, 2	; 23
  DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
  d8:	b8 9a       	sbi	0x17, 0	; 23
  
  USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8f b9       	out	0x0f, r24	; 15
  USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
  de:	8a e2       	ldi	r24, 0x2A	; 42
  e0:	8d b9       	out	0x0d, r24	; 13
              (1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
              (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
              (0<<USITC);
  USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
  e2:	80 ef       	ldi	r24, 0xF0	; 240
  e4:	8e b9       	out	0x0e, r24	; 14
  e6:	08 95       	ret

000000e8 <USI_TWI_Get_State_Info>:
Use this function to get hold of the error message from the last transmission
---------------------------------------------------------------*/
unsigned char USI_TWI_Get_State_Info( void )
{
  return ( USI_TWI_state.errorState );                            // Return error state.
}
  e8:	80 91 6c 00 	lds	r24, 0x006C
  ec:	08 95       	ret

000000ee <USI_TWI_Master_Transfer>:
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer( unsigned char temp )
{
  USISR = temp;                                     // Set USISR according to temp.
  ee:	8e b9       	out	0x0e, r24	; 14
           (1<<USICS1)|(0<<USICS0)|(1<<USICLK)|     // Software clock strobe as source.
           (1<<USITC);                              // Toggle Clock Port.
  do
  {
    _delay_us( T2_TWI/4 );              
    USICR = temp;                          // Generate positve SCL edge.
  f0:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <USI_TWI_Master_Transfer+0x6>
  f8:	8d b9       	out	0x0d, r24	; 13
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );// Wait for SCL to go high.
  fa:	b2 9b       	sbis	0x16, 2	; 22
  fc:	fe cf       	rjmp	.-4      	; 0xfa <USI_TWI_Master_Transfer+0xc>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <USI_TWI_Master_Transfer+0x12>
 100:	00 00       	nop
    _delay_us( T4_TWI/4 );              
    USICR = temp;                          // Generate negative SCL edge.
 102:	8d b9       	out	0x0d, r24	; 13
  }while( !(USISR & (1<<USIOIF)) );        // Check for transfer complete.
 104:	76 9b       	sbis	0x0e, 6	; 14
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <USI_TWI_Master_Transfer+0x4>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <USI_TWI_Master_Transfer+0x1c>
  
  _delay_us( T2_TWI/4 );                
  temp  = USIDR;                           // Read out data.
 10e:	8f b1       	in	r24, 0x0f	; 15
  USIDR = 0xFF;                            // Release SDA.
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	9f b9       	out	0x0f, r25	; 15
  DDR_USI |= (1<<PIN_USI_SDA);             // Enable SDA as output.
 114:	b8 9a       	sbi	0x17, 0	; 23

  return temp;                             // Return the data from the USIDR
}
 116:	08 95       	ret

00000118 <USI_TWI_Master_Stop>:
 Function for generating a TWI Stop Condition. Used to release 
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop( void )
{
  PORT_USI &= ~(1<<PIN_USI_SDA);           // Pull SDA low.
 118:	c0 98       	cbi	0x18, 0	; 24
  PORT_USI |= (1<<PIN_USI_SCL);            // Release SCL.
 11a:	c2 9a       	sbi	0x18, 2	; 24
  while( !(PIN_USI & (1<<PIN_USI_SCL)) );  // Wait for SCL to go high.
 11c:	b2 9b       	sbis	0x16, 2	; 22
 11e:	fe cf       	rjmp	.-4      	; 0x11c <USI_TWI_Master_Stop+0x4>
 120:	00 c0       	rjmp	.+0      	; 0x122 <USI_TWI_Master_Stop+0xa>
 122:	00 00       	nop
  _delay_us( T4_TWI/4 );               
  PORT_USI |= (1<<PIN_USI_SDA);            // Release SDA.
 124:	c0 9a       	sbi	0x18, 0	; 24
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <USI_TWI_Master_Stop+0x10>
    return (FALSE);
  }
#endif

  return (TRUE);
}
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret

00000130 <USI_TWI_Start_Transceiver_With_Data>:
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	16 2f       	mov	r17, r22
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	20 93 6c 00 	sts	0x006C, r18
 140:	fc 01       	movw	r30, r24
 142:	20 81       	ld	r18, Z
 144:	20 fd       	sbrc	r18, 0
 146:	03 c0       	rjmp	.+6      	; 0x14e <USI_TWI_Start_Transceiver_With_Data+0x1e>
 148:	23 e0       	ldi	r18, 0x03	; 3
 14a:	20 93 6c 00 	sts	0x006C, r18
 14e:	c2 9a       	sbi	0x18, 2	; 24
 150:	b2 9b       	sbis	0x16, 2	; 22
 152:	fe cf       	rjmp	.-4      	; 0x150 <USI_TWI_Start_Transceiver_With_Data+0x20>
 154:	00 c0       	rjmp	.+0      	; 0x156 <USI_TWI_Start_Transceiver_With_Data+0x26>
 156:	00 00       	nop
 158:	c0 98       	cbi	0x18, 0	; 24
 15a:	00 c0       	rjmp	.+0      	; 0x15c <USI_TWI_Start_Transceiver_With_Data+0x2c>
 15c:	00 00       	nop
 15e:	c2 98       	cbi	0x18, 2	; 24
 160:	c0 9a       	sbi	0x18, 0	; 24
 162:	ec 01       	movw	r28, r24
 164:	0f ef       	ldi	r16, 0xFF	; 255
 166:	80 91 6c 00 	lds	r24, 0x006C
 16a:	83 70       	andi	r24, 0x03	; 3
 16c:	f9 f0       	breq	.+62     	; 0x1ac <USI_TWI_Start_Transceiver_With_Data+0x7c>
 16e:	c2 98       	cbi	0x18, 2	; 24
 170:	88 81       	ld	r24, Y
 172:	8f b9       	out	0x0f, r24	; 15
 174:	80 ef       	ldi	r24, 0xF0	; 240
 176:	bb df       	rcall	.-138    	; 0xee <USI_TWI_Master_Transfer>
 178:	b8 98       	cbi	0x17, 0	; 23
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	b8 df       	rcall	.-144    	; 0xee <USI_TWI_Master_Transfer>
 17e:	80 ff       	sbrs	r24, 0
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <USI_TWI_Start_Transceiver_With_Data+0x70>
 182:	90 91 6c 00 	lds	r25, 0x006C
 186:	89 2f       	mov	r24, r25
 188:	81 70       	andi	r24, 0x01	; 1
 18a:	90 ff       	sbrs	r25, 0
 18c:	05 c0       	rjmp	.+10     	; 0x198 <USI_TWI_Start_Transceiver_With_Data+0x68>
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	80 93 6c 00 	sts	0x006C, r24
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	1b c0       	rjmp	.+54     	; 0x1ce <USI_TWI_Start_Transceiver_With_Data+0x9e>
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	90 93 6c 00 	sts	0x006C, r25
 19e:	17 c0       	rjmp	.+46     	; 0x1ce <USI_TWI_Start_Transceiver_With_Data+0x9e>
 1a0:	80 91 6c 00 	lds	r24, 0x006C
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	80 93 6c 00 	sts	0x006C, r24
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <USI_TWI_Start_Transceiver_With_Data+0x92>
 1ac:	b8 98       	cbi	0x17, 0	; 23
 1ae:	80 ef       	ldi	r24, 0xF0	; 240
 1b0:	9e df       	rcall	.-196    	; 0xee <USI_TWI_Master_Transfer>
 1b2:	88 83       	st	Y, r24
 1b4:	11 30       	cpi	r17, 0x01	; 1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <USI_TWI_Start_Transceiver_With_Data+0x8c>
 1b8:	0f b9       	out	0x0f, r16	; 15
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <USI_TWI_Start_Transceiver_With_Data+0x8e>
 1bc:	1f b8       	out	0x0f, r1	; 15
 1be:	8e ef       	ldi	r24, 0xFE	; 254
 1c0:	96 df       	rcall	.-212    	; 0xee <USI_TWI_Master_Transfer>
 1c2:	11 50       	subi	r17, 0x01	; 1
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	11 11       	cpse	r17, r1
 1c8:	ce cf       	rjmp	.-100    	; 0x166 <USI_TWI_Start_Transceiver_With_Data+0x36>
 1ca:	a6 df       	rcall	.-180    	; 0x118 <USI_TWI_Master_Stop>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <main>:
short up=0;
short down=0;

int main(void) {
  
  C_CLEARBIT(direction_down);
 1d8:	bb 98       	cbi	0x17, 3	; 23
  C_CLEARBIT(direction_up);
 1da:	bc 98       	cbi	0x17, 4	; 23
  
  for(;;){
	  
	if(!(PORTB & (1<<3))&&down==0){
    down=1;
 1dc:	c1 e0       	ldi	r28, 0x01	; 1
 1de:	d0 e0       	ldi	r29, 0x00	; 0
  C_CLEARBIT(direction_down);
  C_CLEARBIT(direction_up);
  
  for(;;){
	  
	if(!(PORTB & (1<<3))&&down==0){
 1e0:	c3 99       	sbic	0x18, 3	; 24
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <main+0x20>
 1e4:	80 91 62 00 	lds	r24, 0x0062
 1e8:	90 91 63 00 	lds	r25, 0x0063
 1ec:	89 2b       	or	r24, r25
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <main+0x20>
    down=1;
 1f0:	d0 93 63 00 	sts	0x0063, r29
 1f4:	c0 93 62 00 	sts	0x0062, r28
	}
	if(!(PORTB & (1<<3))&&down==1){
 1f8:	c3 99       	sbic	0x18, 3	; 24
 1fa:	18 c0       	rjmp	.+48     	; 0x22c <main+0x54>
 1fc:	80 91 62 00 	lds	r24, 0x0062
 200:	90 91 63 00 	lds	r25, 0x0063
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	91 f4       	brne	.+36     	; 0x22c <main+0x54>
		down=0;
 208:	10 92 63 00 	sts	0x0063, r1
 20c:	10 92 62 00 	sts	0x0062, r1
		if(frequency>8750)
 210:	80 91 60 00 	lds	r24, 0x0060
 214:	90 91 61 00 	lds	r25, 0x0061
 218:	8f 32       	cpi	r24, 0x2F	; 47
 21a:	22 e2       	ldi	r18, 0x22	; 34
 21c:	92 07       	cpc	r25, r18
 21e:	34 f0       	brlt	.+12     	; 0x22c <main+0x54>
		{
			frequency=frequency-10;
 220:	0a 97       	sbiw	r24, 0x0a	; 10
 222:	90 93 61 00 	sts	0x0061, r25
 226:	80 93 60 00 	sts	0x0060, r24
			setFrequency();
 22a:	15 df       	rcall	.-470    	; 0x56 <setFrequency>
		}
    }
    
    if(!(PORTB & (1<<4))&&up==0){
 22c:	c4 99       	sbic	0x18, 4	; 24
 22e:	0a c0       	rjmp	.+20     	; 0x244 <main+0x6c>
 230:	80 91 64 00 	lds	r24, 0x0064
 234:	90 91 65 00 	lds	r25, 0x0065
 238:	89 2b       	or	r24, r25
 23a:	21 f4       	brne	.+8      	; 0x244 <main+0x6c>
		up=1;
 23c:	d0 93 65 00 	sts	0x0065, r29
 240:	c0 93 64 00 	sts	0x0064, r28
	}
	if(!(PORTB & (1<<4))&&up==1){
 244:	c4 99       	sbic	0x18, 4	; 24
 246:	18 c0       	rjmp	.+48     	; 0x278 <__stack+0x19>
 248:	80 91 64 00 	lds	r24, 0x0064
 24c:	90 91 65 00 	lds	r25, 0x0065
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	91 f4       	brne	.+36     	; 0x278 <__stack+0x19>
		up=0;
 254:	10 92 65 00 	sts	0x0065, r1
 258:	10 92 64 00 	sts	0x0064, r1
		if(frequency<10800){
 25c:	80 91 60 00 	lds	r24, 0x0060
 260:	90 91 61 00 	lds	r25, 0x0061
 264:	80 33       	cpi	r24, 0x30	; 48
 266:	2a e2       	ldi	r18, 0x2A	; 42
 268:	92 07       	cpc	r25, r18
 26a:	34 f4       	brge	.+12     	; 0x278 <__stack+0x19>
			frequency=frequency+10;
 26c:	0a 96       	adiw	r24, 0x0a	; 10
 26e:	90 93 61 00 	sts	0x0061, r25
 272:	80 93 60 00 	sts	0x0060, r24
			setFrequency();
 276:	ef de       	rcall	.-546    	; 0x56 <setFrequency>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e7       	ldi	r24, 0x7F	; 127
 27a:	9a e1       	ldi	r25, 0x1A	; 26
 27c:	26 e0       	ldi	r18, 0x06	; 6
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	20 40       	sbci	r18, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <__stack+0x1f>
 286:	00 c0       	rjmp	.+0      	; 0x288 <__stack+0x29>
 288:	00 00       	nop
 28a:	aa cf       	rjmp	.-172    	; 0x1e0 <main+0x8>

0000028c <__divmodsi4>:
 28c:	05 2e       	mov	r0, r21
 28e:	97 fb       	bst	r25, 7
 290:	16 f4       	brtc	.+4      	; 0x296 <__divmodsi4+0xa>
 292:	00 94       	com	r0
 294:	0f d0       	rcall	.+30     	; 0x2b4 <__negsi2>
 296:	57 fd       	sbrc	r21, 7
 298:	05 d0       	rcall	.+10     	; 0x2a4 <__divmodsi4_neg2>
 29a:	68 d0       	rcall	.+208    	; 0x36c <__udivmodsi4>
 29c:	07 fc       	sbrc	r0, 7
 29e:	02 d0       	rcall	.+4      	; 0x2a4 <__divmodsi4_neg2>
 2a0:	46 f4       	brtc	.+16     	; 0x2b2 <__divmodsi4_exit>
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <__negsi2>

000002a4 <__divmodsi4_neg2>:
 2a4:	50 95       	com	r21
 2a6:	40 95       	com	r20
 2a8:	30 95       	com	r19
 2aa:	21 95       	neg	r18
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	4f 4f       	sbci	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255

000002b2 <__divmodsi4_exit>:
 2b2:	08 95       	ret

000002b4 <__negsi2>:
 2b4:	90 95       	com	r25
 2b6:	80 95       	com	r24
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__mulsidi3>:
 2c4:	68 94       	set
 2c6:	00 13       	cpse	r16, r16

000002c8 <__umulsidi3>:
 2c8:	e8 94       	clt
 2ca:	a0 e0       	ldi	r26, 0x00	; 0
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	ea e6       	ldi	r30, 0x6A	; 106
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	1d c0       	rjmp	.+58     	; 0x30e <__prologue_saves__+0x10>
 2d4:	ef ef       	ldi	r30, 0xFF	; 255
 2d6:	e7 f9       	bld	r30, 7
 2d8:	59 01       	movw	r10, r18
 2da:	6a 01       	movw	r12, r20
 2dc:	5e 23       	and	r21, r30
 2de:	55 0f       	add	r21, r21
 2e0:	ee 08       	sbc	r14, r14
 2e2:	fe 2c       	mov	r15, r14
 2e4:	87 01       	movw	r16, r14
 2e6:	9b 01       	movw	r18, r22
 2e8:	ac 01       	movw	r20, r24
 2ea:	9e 23       	and	r25, r30
 2ec:	99 0f       	add	r25, r25
 2ee:	66 0b       	sbc	r22, r22
 2f0:	76 2f       	mov	r23, r22
 2f2:	cb 01       	movw	r24, r22
 2f4:	5d d0       	rcall	.+186    	; 0x3b0 <__muldi3>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	ea e0       	ldi	r30, 0x0A	; 10
 2fc:	24 c0       	rjmp	.+72     	; 0x346 <__epilogue_restores__+0x10>

000002fe <__prologue_saves__>:
 2fe:	2f 92       	push	r2
 300:	3f 92       	push	r3
 302:	4f 92       	push	r4
 304:	5f 92       	push	r5
 306:	6f 92       	push	r6
 308:	7f 92       	push	r7
 30a:	8f 92       	push	r8
 30c:	9f 92       	push	r9
 30e:	af 92       	push	r10
 310:	bf 92       	push	r11
 312:	cf 92       	push	r12
 314:	df 92       	push	r13
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	ca 1b       	sub	r28, r26
 328:	db 0b       	sbc	r29, r27
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	09 94       	ijmp

00000336 <__epilogue_restores__>:
 336:	2a 88       	ldd	r2, Y+18	; 0x12
 338:	39 88       	ldd	r3, Y+17	; 0x11
 33a:	48 88       	ldd	r4, Y+16	; 0x10
 33c:	5f 84       	ldd	r5, Y+15	; 0x0f
 33e:	6e 84       	ldd	r6, Y+14	; 0x0e
 340:	7d 84       	ldd	r7, Y+13	; 0x0d
 342:	8c 84       	ldd	r8, Y+12	; 0x0c
 344:	9b 84       	ldd	r9, Y+11	; 0x0b
 346:	aa 84       	ldd	r10, Y+10	; 0x0a
 348:	b9 84       	ldd	r11, Y+9	; 0x09
 34a:	c8 84       	ldd	r12, Y+8	; 0x08
 34c:	df 80       	ldd	r13, Y+7	; 0x07
 34e:	ee 80       	ldd	r14, Y+6	; 0x06
 350:	fd 80       	ldd	r15, Y+5	; 0x05
 352:	0c 81       	ldd	r16, Y+4	; 0x04
 354:	1b 81       	ldd	r17, Y+3	; 0x03
 356:	aa 81       	ldd	r26, Y+2	; 0x02
 358:	b9 81       	ldd	r27, Y+1	; 0x01
 35a:	ce 0f       	add	r28, r30
 35c:	d1 1d       	adc	r29, r1
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	ed 01       	movw	r28, r26
 36a:	08 95       	ret

0000036c <__udivmodsi4>:
 36c:	a1 e2       	ldi	r26, 0x21	; 33
 36e:	1a 2e       	mov	r1, r26
 370:	aa 1b       	sub	r26, r26
 372:	bb 1b       	sub	r27, r27
 374:	fd 01       	movw	r30, r26
 376:	0d c0       	rjmp	.+26     	; 0x392 <__udivmodsi4_ep>

00000378 <__udivmodsi4_loop>:
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	ee 1f       	adc	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	a2 17       	cp	r26, r18
 382:	b3 07       	cpc	r27, r19
 384:	e4 07       	cpc	r30, r20
 386:	f5 07       	cpc	r31, r21
 388:	20 f0       	brcs	.+8      	; 0x392 <__udivmodsi4_ep>
 38a:	a2 1b       	sub	r26, r18
 38c:	b3 0b       	sbc	r27, r19
 38e:	e4 0b       	sbc	r30, r20
 390:	f5 0b       	sbc	r31, r21

00000392 <__udivmodsi4_ep>:
 392:	66 1f       	adc	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	88 1f       	adc	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	1a 94       	dec	r1
 39c:	69 f7       	brne	.-38     	; 0x378 <__udivmodsi4_loop>
 39e:	60 95       	com	r22
 3a0:	70 95       	com	r23
 3a2:	80 95       	com	r24
 3a4:	90 95       	com	r25
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
 3aa:	bd 01       	movw	r22, r26
 3ac:	cf 01       	movw	r24, r30
 3ae:	08 95       	ret

000003b0 <__muldi3>:
 3b0:	df 93       	push	r29
 3b2:	cf 93       	push	r28
 3b4:	9f 92       	push	r9
 3b6:	a0 e4       	ldi	r26, 0x40	; 64
 3b8:	9a 2e       	mov	r9, r26
 3ba:	00 24       	eor	r0, r0
 3bc:	d0 01       	movw	r26, r0
 3be:	e0 01       	movw	r28, r0
 3c0:	f0 01       	movw	r30, r0
 3c2:	16 95       	lsr	r17
 3c4:	07 95       	ror	r16
 3c6:	f7 94       	ror	r15
 3c8:	e7 94       	ror	r14
 3ca:	d7 94       	ror	r13
 3cc:	c7 94       	ror	r12
 3ce:	b7 94       	ror	r11
 3d0:	a7 94       	ror	r10
 3d2:	48 f4       	brcc	.+18     	; 0x3e6 <__muldi3+0x36>
 3d4:	10 68       	ori	r17, 0x80	; 128
 3d6:	a2 0f       	add	r26, r18
 3d8:	b3 1f       	adc	r27, r19
 3da:	c4 1f       	adc	r28, r20
 3dc:	d5 1f       	adc	r29, r21
 3de:	e6 1f       	adc	r30, r22
 3e0:	f7 1f       	adc	r31, r23
 3e2:	08 1e       	adc	r0, r24
 3e4:	19 1e       	adc	r1, r25
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	9a 94       	dec	r9
 3f8:	21 f7       	brne	.-56     	; 0x3c2 <__muldi3+0x12>
 3fa:	9d 01       	movw	r18, r26
 3fc:	ae 01       	movw	r20, r28
 3fe:	bf 01       	movw	r22, r30
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	9f 90       	pop	r9
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
