   1               		.file	"main.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 102               	.global	setFrequency
 104               	setFrequency:
 105               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #define F_CPU 1000000UL
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include "i2cmaster.h"
   5:main.c        **** 
   6:main.c        **** #define _BV(bit) (1 << (bit))
   7:main.c        **** 
   8:main.c        **** #define SETBIT(ADDRESS,BIT) (ADDRESS |= (1<<BIT))
   9:main.c        **** #define CLEARBIT(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
  10:main.c        **** #define FLIPBIT(ADDRESS,BIT) (ADDRESS ^= (1<<BIT))
  11:main.c        **** #define CHECKBIT(ADDRESS,BIT) (ADDRESS & (1<<BIT))
  12:main.c        **** 
  13:main.c        **** #define SETBITMASK(x,y) (x |= (y))
  14:main.c        **** #define CLEARBITMASK(x,y) (x &= (~y))
  15:main.c        **** #define FLIPBITMASK(x,y) (x ^= (y))
  16:main.c        **** #define CHECKBITMASK(x,y) (x & (y))
  17:main.c        **** 
  18:main.c        **** #define VARFROMCOMB(x, y) x
  19:main.c        **** #define BITFROMCOMB(x, y) y
  20:main.c        **** /*use this ones*/
  21:main.c        **** #define C_SETBIT(comb) SETBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  22:main.c        **** #define C_CLEARBIT(comb) CLEARBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  23:main.c        **** #define C_FLIPBIT(comb) FLIPBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  24:main.c        **** #define C_CHECKBIT(comb) CHECKBIT(VARFROMCOMB(comb), BITFROMCOMB(comb))
  25:main.c        **** /*use this ones*/
  26:main.c        **** #define MIN(A,B)  (((A)<(B)) ? (A) : (B) )
  27:main.c        **** #define MAX(A,B)  (((A)>(B)) ? (A) : (B) )
  28:main.c        **** #define PUT_IN_RANGE(V,VMIN,VMAX) MAX(VMIN,MIN(VMAX,V))
  29:main.c        **** #define MAP_TO_RANGE(V,VMIN0,VMAX0,VMIN1,VMAX1) ( (VMIN1) +  ( (V) – (VMIN0) ) * ( (VMAX1) – (V
  30:main.c        **** 
  31:main.c        **** #define button_frequency_down PORTB,0x1
  32:main.c        **** #define button_frequency_up PORTB,0x2
  33:main.c        **** #define direction_down DDRB,0x1
  34:main.c        **** #define direction_up DDRB,0x2
  35:main.c        **** 
  36:main.c        **** #define TEA5767  0x60                    // device address of tea5767 => 0b1100000
  37:main.c        **** 
  38:main.c        **** int frequency = 8890;                  //starting frequency
  39:main.c        **** 
  40:main.c        **** void setFrequency(){
 107               	.LM0:
 108               	.LFBB1:
 109 0000 8F92      		push r8
 110 0002 9F92      		push r9
 111 0004 AF92      		push r10
 112 0006 BF92      		push r11
 113 0008 CF92      		push r12
 114 000a DF92      		push r13
 115 000c EF92      		push r14
 116 000e FF92      		push r15
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 8 */
 120               	.L__stack_usage = 8
  41:main.c        **** 	char frequencyB = 4 * (frequency * 10000 + 225000) / 32768;  //calculating PLL word
 122               	.LM1:
 123 0010 E090 0000 		lds r14,frequency
 124 0014 F090 0000 		lds r15,frequency+1
  42:main.c        **** 	char frequencyH = frequencyB>>8;
  43:main.c        **** 	char frequencyL = frequencyB&0XFF;
  44:main.c        **** 	unsigned char ret;
  45:main.c        **** 	i2c_init();                          // init I2C interface
 126               	.LM2:
 127 0018 00D0      		rcall i2c_init
  46:main.c        **** 	ret = i2c_start(TEA5767+I2C_WRITE);            // set device address and write mode
 129               	.LM3:
 130 001a 80E6      		ldi r24,lo8(96)
 131 001c 00D0      		rcall i2c_start
  47:main.c        ****   
  48:main.c        ****     if ( ret ) {
 133               	.LM4:
 134 001e 8111      		cpse r24,__zero_reg__
 135 0020 00C0      		rjmp .L3
  49:main.c        ****         /* failed to issue start condition, possibly no device found */
  50:main.c        ****         i2c_stop();
  51:main.c        ****     }
  52:main.c        **** 	else {  
  53:main.c        **** 		i2c_write(frequencyH);
 137               	.LM5:
 138 0022 80E0      		ldi r24,0
 139 0024 00D0      		rcall i2c_write
  41:main.c        **** 	char frequencyH = frequencyB>>8;
 141               	.LM6:
 142 0026 B701      		movw r22,r14
 143 0028 8827      		clr r24
 144 002a 77FD      		sbrc r23,7
 145 002c 8095      		com r24
 146 002e 982F      		mov r25,r24
 147 0030 20E4      		ldi r18,lo8(64)
 148 0032 3CE9      		ldi r19,lo8(-100)
 149 0034 40E0      		ldi r20,0
 150 0036 50E0      		ldi r21,0
 151 0038 00D0      		rcall __mulsidi3
 152 003a 4901      		movw r8,r18
 153 003c 5A01      		movw r10,r20
 154 003e C501      		movw r24,r10
 155 0040 B401      		movw r22,r8
 156 0042 6056      		subi r22,96
 157 0044 7444      		sbci r23,68
 158 0046 824F      		sbci r24,-14
 159 0048 9F4F      		sbci r25,-1
 160 004a 20E0      		ldi r18,0
 161 004c 30E8      		ldi r19,lo8(-128)
 162 004e 40E0      		ldi r20,0
 163 0050 50E0      		ldi r21,0
 164 0052 00D0      		rcall __divmodsi4
 165 0054 822F      		mov r24,r18
  54:main.c        **** 		i2c_write(frequencyL);
 167               	.LM7:
 168 0056 00D0      		rcall i2c_write
  55:main.c        **** 		i2c_write(0xB0);
 170               	.LM8:
 171 0058 80EB      		ldi r24,lo8(-80)
 172 005a 00D0      		rcall i2c_write
  56:main.c        **** 		i2c_write(0x10);
 174               	.LM9:
 175 005c 80E1      		ldi r24,lo8(16)
 176 005e 00D0      		rcall i2c_write
  57:main.c        **** 		i2c_write(0x00);
 178               	.LM10:
 179 0060 80E0      		ldi r24,0
 180 0062 00D0      		rcall i2c_write
 181               	.L3:
 182               	/* epilogue start */
  58:main.c        **** 		i2c_stop();
  59:main.c        **** 	}
  60:main.c        **** 	
  61:main.c        **** }
 184               	.LM11:
 185 0064 FF90      		pop r15
 186 0066 EF90      		pop r14
 187 0068 DF90      		pop r13
 188 006a CF90      		pop r12
 189 006c BF90      		pop r11
 190 006e AF90      		pop r10
 191 0070 9F90      		pop r9
 192 0072 8F90      		pop r8
  58:main.c        **** 		i2c_stop();
 194               	.LM12:
 195 0074 00C0      		rjmp i2c_stop
 197               	.Lscope1:
 199               		.stabd	78,0,0
 200               		.section	.text.startup,"ax",@progbits
 202               	.global	main
 204               	main:
 205               		.stabd	46,0,0
  62:main.c        **** 
  63:main.c        **** int main(void) {
 207               	.LM13:
 208               	.LFBB2:
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 0 */
 212               	.L__stack_usage = 0
  64:main.c        ****   
  65:main.c        ****   C_CLEARBIT(direction_down);
 214               	.LM14:
 215 0000 B998      		cbi 0x17,1
  66:main.c        ****   C_CLEARBIT(direction_up);
 217               	.LM15:
 218 0002 BA98      		cbi 0x17,2
  67:main.c        ****   
  68:main.c        ****   for(;;){
  69:main.c        **** 	  
  70:main.c        **** 	if(PORTB & (1<<1)){
  71:main.c        ****     
  72:main.c        **** 		frequency=frequency-5;
  73:main.c        **** 		if(frequency<8750)
  74:main.c        **** 		{
  75:main.c        **** 			frequency=10800;
 220               	.LM16:
 221 0004 C0E3      		ldi r28,lo8(48)
 222 0006 DAE2      		ldi r29,lo8(42)
  76:main.c        **** 			setFrequency();
  77:main.c        **** 		}
  78:main.c        ****     }
  79:main.c        ****     
  80:main.c        ****     if(PORTB & (1<<2)){
  81:main.c        **** 		
  82:main.c        **** 		frequency=frequency+5;
  83:main.c        **** 		if(frequency>10800){
  84:main.c        **** 			frequency=8750;
 224               	.LM17:
 225 0008 0EE2      		ldi r16,lo8(46)
 226 000a 12E2      		ldi r17,lo8(34)
 227               	.L12:
  70:main.c        ****     
 229               	.LM18:
 230 000c C19B      		sbis 0x18,1
 231 000e 00C0      		rjmp .L7
  72:main.c        **** 		if(frequency<8750)
 233               	.LM19:
 234 0010 8091 0000 		lds r24,frequency
 235 0014 9091 0000 		lds r25,frequency+1
 236 0018 0597      		sbiw r24,5
 237 001a 9093 0000 		sts frequency+1,r25
 238 001e 8093 0000 		sts frequency,r24
  73:main.c        **** 		{
 240               	.LM20:
 241 0022 8E32      		cpi r24,46
 242 0024 9242      		sbci r25,34
 243 0026 04F4      		brge .L7
  75:main.c        **** 			setFrequency();
 245               	.LM21:
 246 0028 D093 0000 		sts frequency+1,r29
 247 002c C093 0000 		sts frequency,r28
  76:main.c        **** 		}
 249               	.LM22:
 250 0030 00D0      		rcall setFrequency
 251               	.L7:
  80:main.c        **** 		
 253               	.LM23:
 254 0032 C29B      		sbis 0x18,2
 255 0034 00C0      		rjmp .L10
  82:main.c        **** 		if(frequency>10800){
 257               	.LM24:
 258 0036 8091 0000 		lds r24,frequency
 259 003a 9091 0000 		lds r25,frequency+1
 260 003e 0596      		adiw r24,5
 261 0040 9093 0000 		sts frequency+1,r25
 262 0044 8093 0000 		sts frequency,r24
  83:main.c        **** 			frequency=8750;
 264               	.LM25:
 265 0048 8133      		cpi r24,49
 266 004a 9A42      		sbci r25,42
 267 004c 04F0      		brlt .L10
 269               	.LM26:
 270 004e 1093 0000 		sts frequency+1,r17
 271 0052 0093 0000 		sts frequency,r16
  85:main.c        **** 			setFrequency();
 273               	.LM27:
 274 0056 00D0      		rcall setFrequency
 275               	.L10:
  86:main.c        **** 		}
  87:main.c        **** 	}
  88:main.c        **** 		
  89:main.c        **** 	setFrequency(frequency);
 277               	.LM28:
 278 0058 8091 0000 		lds r24,frequency
 279 005c 9091 0000 		lds r25,frequency+1
 280 0060 00D0      		rcall setFrequency
 281               	.LBB4:
 282               	.LBB5:
 284               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 286               	.LM29:
 287 0062 83E2      		ldi r24,lo8(-3037)
 288 0064 94EF      		ldi r25,hi8(-3037)
 289 0066 0197      		1: sbiw r24,1
 290 0068 01F4      		brne 1b
 291 006a 00C0      		rjmp .
 292 006c 0000      		nop
 293 006e 00C0      		rjmp .L12
 294               	.LBE5:
 295               	.LBE4:
 297               	.Lscope2:
 299               		.stabd	78,0,0
 300               	.global	frequency
 301               		.data
 304               	frequency:
 305 0000 BA22      		.word	8890
 307               		.text
 309               	.Letext0:
 310               		.ident	"GCC: (GNU) 4.8.1"
 311               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0SuYKY.s:2      *ABS*:000000000000003d __SP_L__
     /tmp/cc0SuYKY.s:3      *ABS*:000000000000003f __SREG__
     /tmp/cc0SuYKY.s:4      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0SuYKY.s:5      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0SuYKY.s:104    .text:0000000000000000 setFrequency
     /tmp/cc0SuYKY.s:304    .data:0000000000000000 frequency
     /tmp/cc0SuYKY.s:204    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
i2c_init
i2c_start
i2c_write
__mulsidi3
__divmodsi4
i2c_stop
__do_copy_data
