
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000035c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c24  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c81  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec e5       	ldi	r30, 0x5C	; 92
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	a4 d0       	rcall	.+328    	; 0x17c <main>
  34:	91 c1       	rjmp	.+802    	; 0x358 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <setFrequency>:

#define TEA5767  0x60                    // device address of tea5767 => 0b1100000

int frequency = 8890;                  //starting frequency

void setFrequency(){
  38:	8f 92       	push	r8
  3a:	9f 92       	push	r9
  3c:	af 92       	push	r10
  3e:	bf 92       	push	r11
  40:	cf 92       	push	r12
  42:	df 92       	push	r13
  44:	ef 92       	push	r14
  46:	ff 92       	push	r15
	char frequencyB = 4 * (frequency * 10000 + 225000) / 32768;  //calculating PLL word
  48:	e0 90 60 00 	lds	r14, 0x0060
  4c:	f0 90 61 00 	lds	r15, 0x0061
	char frequencyH = frequencyB>>8;
	char frequencyL = frequencyB&0XFF;
	unsigned char ret;
	i2c_init();                          // init I2C interface
  50:	36 d0       	rcall	.+108    	; 0xbe <i2c_init>
	ret = i2c_start(TEA5767+I2C_WRITE);            // set device address and write mode
  52:	80 e6       	ldi	r24, 0x60	; 96
  54:	39 d0       	rcall	.+114    	; 0xc8 <i2c_start>
  
    if ( ret ) {
  56:	81 11       	cpse	r24, r1
  58:	21 c0       	rjmp	.+66     	; 0x9c <__SREG__+0x5d>
        /* failed to issue start condition, possibly no device found */
        i2c_stop();
    }
	else {  
		i2c_write(frequencyH);
  5a:	80 e0       	ldi	r24, 0x00	; 0
  5c:	55 d0       	rcall	.+170    	; 0x108 <i2c_write>
#define TEA5767  0x60                    // device address of tea5767 => 0b1100000

int frequency = 8890;                  //starting frequency

void setFrequency(){
	char frequencyB = 4 * (frequency * 10000 + 225000) / 32768;  //calculating PLL word
  5e:	b7 01       	movw	r22, r14
  60:	88 27       	eor	r24, r24
  62:	77 fd       	sbrc	r23, 7
  64:	80 95       	com	r24
  66:	98 2f       	mov	r25, r24
  68:	20 e4       	ldi	r18, 0x40	; 64
  6a:	3c e9       	ldi	r19, 0x9C	; 156
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	d9 d0       	rcall	.+434    	; 0x224 <__mulsidi3>
  72:	49 01       	movw	r8, r18
  74:	5a 01       	movw	r10, r20
  76:	c5 01       	movw	r24, r10
  78:	b4 01       	movw	r22, r8
  7a:	60 56       	subi	r22, 0x60	; 96
  7c:	74 44       	sbci	r23, 0x44	; 68
  7e:	82 4f       	sbci	r24, 0xF2	; 242
  80:	9f 4f       	sbci	r25, 0xFF	; 255
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e8       	ldi	r19, 0x80	; 128
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	b0 d0       	rcall	.+352    	; 0x1ec <__divmodsi4>
  8c:	82 2f       	mov	r24, r18
        /* failed to issue start condition, possibly no device found */
        i2c_stop();
    }
	else {  
		i2c_write(frequencyH);
		i2c_write(frequencyL);
  8e:	3c d0       	rcall	.+120    	; 0x108 <i2c_write>
		i2c_write(0xB0);
  90:	80 eb       	ldi	r24, 0xB0	; 176
  92:	3a d0       	rcall	.+116    	; 0x108 <i2c_write>
		i2c_write(0x10);
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	38 d0       	rcall	.+112    	; 0x108 <i2c_write>
		i2c_write(0x00);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	36 d0       	rcall	.+108    	; 0x108 <i2c_write>
		i2c_stop();
	}
	
}
  9c:	ff 90       	pop	r15
  9e:	ef 90       	pop	r14
  a0:	df 90       	pop	r13
  a2:	cf 90       	pop	r12
  a4:	bf 90       	pop	r11
  a6:	af 90       	pop	r10
  a8:	9f 90       	pop	r9
  aa:	8f 90       	pop	r8
		i2c_write(frequencyH);
		i2c_write(frequencyL);
		i2c_write(0xB0);
		i2c_write(0x10);
		i2c_write(0x00);
		i2c_stop();
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <i2c_stop>

000000ae <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
  b8:	00 c0       	rjmp	.+0      	; 0xba <i2c_delay_T2+0xc>
6:	nop          ; 1   "
  ba:	00 00       	nop
	ret          ; 3   "
  bc:	08 95       	ret

000000be <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
  be:	bc 98       	cbi	0x17, 4	; 23
	cbi SCL_DDR,SCL		;release SCL
  c0:	bd 98       	cbi	0x17, 5	; 23
	cbi SDA_OUT,SDA
  c2:	c4 98       	cbi	0x18, 4	; 24
	cbi SCL_OUT,SCL
  c4:	c5 98       	cbi	0x18, 5	; 24
	ret
  c6:	08 95       	ret

000000c8 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
  c8:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay T/2
  ca:	f1 df       	rcall	.-30     	; 0xae <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
  cc:	1d d0       	rcall	.+58     	; 0x108 <i2c_write>
	ret
  ce:	08 95       	ret

000000d0 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
  d0:	bd 9a       	sbi	0x17, 5	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  d2:	ed df       	rcall	.-38     	; 0xae <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  d4:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
  d6:	eb df       	rcall	.-42     	; 0xae <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  d8:	bd 98       	cbi	0x17, 5	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  da:	e9 df       	rcall	.-46     	; 0xae <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
  dc:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay	T/2
  de:	e7 df       	rcall	.-50     	; 0xae <i2c_delay_T2>
	
	rcall	i2c_write	;write address
  e0:	13 d0       	rcall	.+38     	; 0x108 <i2c_write>
	ret
  e2:	08 95       	ret

000000e4 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
  e4:	08 2e       	mov	r0, r24

000000e6 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
  e6:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay T/2
  e8:	e2 df       	rcall	.-60     	; 0xae <i2c_delay_T2>
	mov	r24,__tmp_reg__
  ea:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
  ec:	0d d0       	rcall	.+26     	; 0x108 <i2c_write>
	tst	r24		;if device not busy -> done
  ee:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
  f0:	11 f0       	breq	.+4      	; 0xf6 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
  f2:	02 d0       	rcall	.+4      	; 0xf8 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
  f4:	f8 cf       	rjmp	.-16     	; 0xe6 <i2c_start_wait1>

000000f6 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
  f6:	08 95       	ret

000000f8 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
  f8:	bd 9a       	sbi	0x17, 5	; 23
	sbi	SDA_DDR,SDA	;force SDA low
  fa:	bc 9a       	sbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
  fc:	d8 df       	rcall	.-80     	; 0xae <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  fe:	bd 98       	cbi	0x17, 5	; 23
	rcall	i2c_delay_T2	;delay T/2
 100:	d6 df       	rcall	.-84     	; 0xae <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 102:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 104:	d4 df       	rcall	.-88     	; 0xae <i2c_delay_T2>
	ret
 106:	08 95       	ret

00000108 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
 108:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
 10a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
 10c:	01 c0       	rjmp	.+2      	; 0x110 <i2c_write_first>

0000010e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
 10e:	88 0f       	add	r24, r24

00000110 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
 110:	59 f0       	breq	.+22     	; 0x128 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
 112:	bd 9a       	sbi	0x17, 5	; 23
	brcc	i2c_write_low
 114:	18 f4       	brcc	.+6      	; 0x11c <i2c_write_low>
	nop
 116:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
 118:	bc 98       	cbi	0x17, 4	; 23
	rjmp	i2c_write_high
 11a:	02 c0       	rjmp	.+4      	; 0x120 <i2c_write_high>

0000011c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
 11c:	bc 9a       	sbi	0x17, 4	; 23
	rjmp	i2c_write_high
 11e:	00 c0       	rjmp	.+0      	; 0x120 <i2c_write_high>

00000120 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
 120:	c6 df       	rcall	.-116    	; 0xae <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 122:	bd 98       	cbi	0x17, 5	; 23
	rcall	i2c_delay_T2	;delay T/2
 124:	c4 df       	rcall	.-120    	; 0xae <i2c_delay_T2>
	rjmp	i2c_write_bit
 126:	f3 cf       	rjmp	.-26     	; 0x10e <i2c_write_bit>

00000128 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
 128:	bd 9a       	sbi	0x17, 5	; 23
	cbi	SDA_DDR,SDA	;release SDA
 12a:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 12c:	c0 df       	rcall	.-128    	; 0xae <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 12e:	bd 98       	cbi	0x17, 5	; 23

00000130 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 130:	b5 9b       	sbis	0x16, 5	; 22
	rjmp	i2c_ack_wait
 132:	fe cf       	rjmp	.-4      	; 0x130 <i2c_ack_wait>
	
	clr	r24		;return 0
 134:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
 136:	b4 99       	sbic	0x16, 4	; 22
	ldi	r24,1
 138:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
 13a:	b9 df       	rcall	.-142    	; 0xae <i2c_delay_T2>
	clr	r25
 13c:	99 27       	eor	r25, r25
	ret
 13e:	08 95       	ret

00000140 <i2c_readNak>:
 140:	88 27       	eor	r24, r24
 142:	01 c0       	rjmp	.+2      	; 0x146 <i2c_read>

00000144 <i2c_readAck>:
 144:	81 e0       	ldi	r24, 0x01	; 1

00000146 <i2c_read>:
 146:	71 e0       	ldi	r23, 0x01	; 1

00000148 <i2c_read_bit>:
 148:	bd 9a       	sbi	0x17, 5	; 23
 14a:	bc 98       	cbi	0x17, 4	; 23
 14c:	b0 df       	rcall	.-160    	; 0xae <i2c_delay_T2>
 14e:	bd 98       	cbi	0x17, 5	; 23
 150:	ae df       	rcall	.-164    	; 0xae <i2c_delay_T2>

00000152 <i2c_read_stretch>:
 152:	b5 9b       	sbis	0x16, 5	; 22
 154:	fe cf       	rjmp	.-4      	; 0x152 <i2c_read_stretch>
 156:	88 94       	clc
 158:	b4 99       	sbic	0x16, 4	; 22
 15a:	08 94       	sec
 15c:	77 1f       	adc	r23, r23
 15e:	a0 f7       	brcc	.-24     	; 0x148 <i2c_read_bit>

00000160 <i2c_put_ack>:
 160:	bd 9a       	sbi	0x17, 5	; 23
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	11 f0       	breq	.+4      	; 0x16a <i2c_put_ack_low>
 166:	bc 98       	cbi	0x17, 4	; 23
 168:	01 c0       	rjmp	.+2      	; 0x16c <i2c_put_ack_high>

0000016a <i2c_put_ack_low>:
 16a:	bc 9a       	sbi	0x17, 4	; 23

0000016c <i2c_put_ack_high>:
 16c:	a0 df       	rcall	.-192    	; 0xae <i2c_delay_T2>
 16e:	bd 98       	cbi	0x17, 5	; 23

00000170 <i2c_put_ack_wait>:
 170:	b5 9b       	sbis	0x16, 5	; 22
 172:	fe cf       	rjmp	.-4      	; 0x170 <i2c_put_ack_wait>
 174:	9c df       	rcall	.-200    	; 0xae <i2c_delay_T2>
 176:	87 2f       	mov	r24, r23
 178:	99 27       	eor	r25, r25
 17a:	08 95       	ret

0000017c <main>:
	
}

int main(void) {
  
  C_CLEARBIT(direction_down);
 17c:	b9 98       	cbi	0x17, 1	; 23
  C_CLEARBIT(direction_up);
 17e:	ba 98       	cbi	0x17, 2	; 23
	if(PORTB & (1<<1)){
    
		frequency=frequency-5;
		if(frequency<8750)
		{
			frequency=10800;
 180:	c0 e3       	ldi	r28, 0x30	; 48
 182:	da e2       	ldi	r29, 0x2A	; 42
    
    if(PORTB & (1<<2)){
		
		frequency=frequency+5;
		if(frequency>10800){
			frequency=8750;
 184:	0e e2       	ldi	r16, 0x2E	; 46
 186:	12 e2       	ldi	r17, 0x22	; 34
  C_CLEARBIT(direction_down);
  C_CLEARBIT(direction_up);
  
  for(;;){
	  
	if(PORTB & (1<<1)){
 188:	c1 9b       	sbis	0x18, 1	; 24
 18a:	11 c0       	rjmp	.+34     	; 0x1ae <main+0x32>
    
		frequency=frequency-5;
 18c:	80 91 60 00 	lds	r24, 0x0060
 190:	90 91 61 00 	lds	r25, 0x0061
 194:	05 97       	sbiw	r24, 0x05	; 5
 196:	90 93 61 00 	sts	0x0061, r25
 19a:	80 93 60 00 	sts	0x0060, r24
		if(frequency<8750)
 19e:	8e 32       	cpi	r24, 0x2E	; 46
 1a0:	92 42       	sbci	r25, 0x22	; 34
 1a2:	2c f4       	brge	.+10     	; 0x1ae <main+0x32>
		{
			frequency=10800;
 1a4:	d0 93 61 00 	sts	0x0061, r29
 1a8:	c0 93 60 00 	sts	0x0060, r28
			setFrequency();
 1ac:	45 df       	rcall	.-374    	; 0x38 <setFrequency>
		}
    }
    
    if(PORTB & (1<<2)){
 1ae:	c2 9b       	sbis	0x18, 2	; 24
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <main+0x58>
		
		frequency=frequency+5;
 1b2:	80 91 60 00 	lds	r24, 0x0060
 1b6:	90 91 61 00 	lds	r25, 0x0061
 1ba:	05 96       	adiw	r24, 0x05	; 5
 1bc:	90 93 61 00 	sts	0x0061, r25
 1c0:	80 93 60 00 	sts	0x0060, r24
		if(frequency>10800){
 1c4:	81 33       	cpi	r24, 0x31	; 49
 1c6:	9a 42       	sbci	r25, 0x2A	; 42
 1c8:	2c f0       	brlt	.+10     	; 0x1d4 <main+0x58>
			frequency=8750;
 1ca:	10 93 61 00 	sts	0x0061, r17
 1ce:	00 93 60 00 	sts	0x0060, r16
			setFrequency();
 1d2:	32 df       	rcall	.-412    	; 0x38 <setFrequency>
		}
	}
		
	setFrequency(frequency);
 1d4:	80 91 60 00 	lds	r24, 0x0060
 1d8:	90 91 61 00 	lds	r25, 0x0061
 1dc:	2d df       	rcall	.-422    	; 0x38 <setFrequency>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	83 e2       	ldi	r24, 0x23	; 35
 1e0:	94 ef       	ldi	r25, 0xF4	; 244
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x66>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x6c>
 1e8:	00 00       	nop
 1ea:	ce cf       	rjmp	.-100    	; 0x188 <main+0xc>

000001ec <__divmodsi4>:
 1ec:	05 2e       	mov	r0, r21
 1ee:	97 fb       	bst	r25, 7
 1f0:	16 f4       	brtc	.+4      	; 0x1f6 <__divmodsi4+0xa>
 1f2:	00 94       	com	r0
 1f4:	0f d0       	rcall	.+30     	; 0x214 <__negsi2>
 1f6:	57 fd       	sbrc	r21, 7
 1f8:	05 d0       	rcall	.+10     	; 0x204 <__divmodsi4_neg2>
 1fa:	5e d0       	rcall	.+188    	; 0x2b8 <__udivmodsi4>
 1fc:	07 fc       	sbrc	r0, 7
 1fe:	02 d0       	rcall	.+4      	; 0x204 <__divmodsi4_neg2>
 200:	46 f4       	brtc	.+16     	; 0x212 <__divmodsi4_exit>
 202:	08 c0       	rjmp	.+16     	; 0x214 <__negsi2>

00000204 <__divmodsi4_neg2>:
 204:	50 95       	com	r21
 206:	40 95       	com	r20
 208:	30 95       	com	r19
 20a:	21 95       	neg	r18
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	4f 4f       	sbci	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255

00000212 <__divmodsi4_exit>:
 212:	08 95       	ret

00000214 <__negsi2>:
 214:	90 95       	com	r25
 216:	80 95       	com	r24
 218:	70 95       	com	r23
 21a:	61 95       	neg	r22
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	8f 4f       	sbci	r24, 0xFF	; 255
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	08 95       	ret

00000224 <__mulsidi3>:
 224:	68 94       	set
 226:	00 13       	cpse	r16, r16

00000228 <__umulsidi3>:
 228:	e8 94       	clt
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	ea e1       	ldi	r30, 0x1A	; 26
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	1d c0       	rjmp	.+58     	; 0x26e <__prologue_saves__+0x10>
 234:	ef ef       	ldi	r30, 0xFF	; 255
 236:	e7 f9       	bld	r30, 7
 238:	59 01       	movw	r10, r18
 23a:	6a 01       	movw	r12, r20
 23c:	5e 23       	and	r21, r30
 23e:	55 0f       	add	r21, r21
 240:	ee 08       	sbc	r14, r14
 242:	fe 2c       	mov	r15, r14
 244:	87 01       	movw	r16, r14
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	9e 23       	and	r25, r30
 24c:	99 0f       	add	r25, r25
 24e:	66 0b       	sbc	r22, r22
 250:	76 2f       	mov	r23, r22
 252:	cb 01       	movw	r24, r22
 254:	53 d0       	rcall	.+166    	; 0x2fc <__muldi3>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	dd 27       	eor	r29, r29
 25a:	ea e0       	ldi	r30, 0x0A	; 10
 25c:	1f c0       	rjmp	.+62     	; 0x29c <__epilogue_restores__+0x10>

0000025e <__prologue_saves__>:
 25e:	2f 92       	push	r2
 260:	3f 92       	push	r3
 262:	4f 92       	push	r4
 264:	5f 92       	push	r5
 266:	6f 92       	push	r6
 268:	7f 92       	push	r7
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	ca 1b       	sub	r28, r26
 286:	cd bf       	out	0x3d, r28	; 61
 288:	dd 27       	eor	r29, r29
 28a:	09 94       	ijmp

0000028c <__epilogue_restores__>:
 28c:	2a 88       	ldd	r2, Y+18	; 0x12
 28e:	39 88       	ldd	r3, Y+17	; 0x11
 290:	48 88       	ldd	r4, Y+16	; 0x10
 292:	5f 84       	ldd	r5, Y+15	; 0x0f
 294:	6e 84       	ldd	r6, Y+14	; 0x0e
 296:	7d 84       	ldd	r7, Y+13	; 0x0d
 298:	8c 84       	ldd	r8, Y+12	; 0x0c
 29a:	9b 84       	ldd	r9, Y+11	; 0x0b
 29c:	aa 84       	ldd	r10, Y+10	; 0x0a
 29e:	b9 84       	ldd	r11, Y+9	; 0x09
 2a0:	c8 84       	ldd	r12, Y+8	; 0x08
 2a2:	df 80       	ldd	r13, Y+7	; 0x07
 2a4:	ee 80       	ldd	r14, Y+6	; 0x06
 2a6:	fd 80       	ldd	r15, Y+5	; 0x05
 2a8:	0c 81       	ldd	r16, Y+4	; 0x04
 2aa:	1b 81       	ldd	r17, Y+3	; 0x03
 2ac:	aa 81       	ldd	r26, Y+2	; 0x02
 2ae:	d9 81       	ldd	r29, Y+1	; 0x01
 2b0:	ce 0f       	add	r28, r30
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	ca 2f       	mov	r28, r26
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <__muldi3>:
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	9f 92       	push	r9
 302:	a0 e4       	ldi	r26, 0x40	; 64
 304:	9a 2e       	mov	r9, r26
 306:	00 24       	eor	r0, r0
 308:	d0 01       	movw	r26, r0
 30a:	e0 01       	movw	r28, r0
 30c:	f0 01       	movw	r30, r0
 30e:	16 95       	lsr	r17
 310:	07 95       	ror	r16
 312:	f7 94       	ror	r15
 314:	e7 94       	ror	r14
 316:	d7 94       	ror	r13
 318:	c7 94       	ror	r12
 31a:	b7 94       	ror	r11
 31c:	a7 94       	ror	r10
 31e:	48 f4       	brcc	.+18     	; 0x332 <__muldi3+0x36>
 320:	10 68       	ori	r17, 0x80	; 128
 322:	a2 0f       	add	r26, r18
 324:	b3 1f       	adc	r27, r19
 326:	c4 1f       	adc	r28, r20
 328:	d5 1f       	adc	r29, r21
 32a:	e6 1f       	adc	r30, r22
 32c:	f7 1f       	adc	r31, r23
 32e:	08 1e       	adc	r0, r24
 330:	19 1e       	adc	r1, r25
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	44 1f       	adc	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	66 1f       	adc	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	9a 94       	dec	r9
 344:	21 f7       	brne	.-56     	; 0x30e <__muldi3+0x12>
 346:	9d 01       	movw	r18, r26
 348:	ae 01       	movw	r20, r28
 34a:	bf 01       	movw	r22, r30
 34c:	c0 01       	movw	r24, r0
 34e:	11 24       	eor	r1, r1
 350:	9f 90       	pop	r9
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
